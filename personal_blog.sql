/*
Navicat MySQL Data Transfer

Source Server         : mysql
Source Server Version : 80019
Source Host           : localhost:3306
Source Database       : personal_blog

Target Server Type    : MYSQL
Target Server Version : 80019
File Encoding         : 65001

Date: 2023-11-14 20:50:59
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `blog_art`
-- ----------------------------
DROP TABLE IF EXISTS `blog_art`;
CREATE TABLE `blog_art` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `art_name` varchar(12) DEFAULT NULL COMMENT '技术领域名字',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='技术领域';

-- ----------------------------
-- Records of blog_art
-- ----------------------------
INSERT INTO `blog_art` VALUES ('1', 'IT', '2023-10-09 16:03:51', '2023-10-09 16:03:55', '');
INSERT INTO `blog_art` VALUES ('2', '文学', '2023-10-09 16:04:24', '2023-10-09 16:04:28', '');
INSERT INTO `blog_art` VALUES ('3', '科研', '2023-10-09 16:04:42', '2023-10-09 16:04:47', '');

-- ----------------------------
-- Table structure for `blog_article`
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '发布文章用户id',
  `article_title` tinytext NOT NULL COMMENT '文章标题',
  `article_content_mapping_id` bigint DEFAULT NULL COMMENT '文章内容ID',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='文章';

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES ('4', '1', '咏柳', '8', '2023-10-04 15:23:39', '2023-10-04 15:23:39', '');
INSERT INTO `blog_article` VALUES ('5', '1', '爱莲说', '9', '2023-10-06 15:35:36', '2023-10-06 15:35:36', '');
INSERT INTO `blog_article` VALUES ('6', '2', '劝学', '10', '2023-10-06 15:37:37', '2023-10-06 15:37:37', '');
INSERT INTO `blog_article` VALUES ('7', '3', '人生若只如初见，何事秋风悲画扇。', '11', '2023-10-08 19:28:22', '2023-10-08 19:28:22', '');
INSERT INTO `blog_article` VALUES ('8', '3', '111', '12', '2023-10-09 12:42:44', '2023-10-09 15:46:38', '');
INSERT INTO `blog_article` VALUES ('9', '1', '你好哇', '13', '2023-10-10 13:49:54', '2023-10-10 13:49:54', '');
INSERT INTO `blog_article` VALUES ('10', '1', '你好哇', '14', '2023-10-10 13:52:42', '2023-10-10 13:52:42', '');
INSERT INTO `blog_article` VALUES ('11', '1', '111', '15', '2023-10-10 14:07:30', '2023-10-10 14:07:30', '');
INSERT INTO `blog_article` VALUES ('12', '1', '111', '16', '2023-10-10 14:08:48', '2023-10-10 14:08:48', '');
INSERT INTO `blog_article` VALUES ('13', '1', '11', '17', '2023-10-10 14:10:50', '2023-10-10 14:10:50', '');
INSERT INTO `blog_article` VALUES ('14', '1', '11', '18', '2023-10-10 14:10:59', '2023-10-10 14:10:59', '');
INSERT INTO `blog_article` VALUES ('15', '1', '11', '19', '2023-10-10 14:11:19', '2023-10-10 14:11:19', '');
INSERT INTO `blog_article` VALUES ('16', '1', '11', '20', '2023-10-10 14:11:27', '2023-10-10 14:11:27', '');
INSERT INTO `blog_article` VALUES ('17', '1', '11', '21', '2023-10-10 14:13:09', '2023-10-10 14:13:09', '');
INSERT INTO `blog_article` VALUES ('18', '1', '11', '22', '2023-10-10 14:15:11', '2023-10-10 14:15:11', '');
INSERT INTO `blog_article` VALUES ('19', '1', '2121', '23', '2023-10-10 14:16:20', '2023-10-10 14:16:20', '');
INSERT INTO `blog_article` VALUES ('20', '3', 'renjia', '24', '2023-10-12 11:58:30', '2023-10-12 11:58:30', '');
INSERT INTO `blog_article` VALUES ('21', '3', 'renjia', '26', '2023-10-13 15:25:12', '2023-10-13 15:25:12', '');
INSERT INTO `blog_article` VALUES ('22', '3', 'renjia', '27', '2023-10-13 15:39:57', '2023-10-13 15:39:57', '');
INSERT INTO `blog_article` VALUES ('23', '3', 'renia', '29', '2023-10-13 15:40:32', '2023-10-13 15:40:32', '');
INSERT INTO `blog_article` VALUES ('24', '3', 'ee', '30', '2023-10-13 15:56:27', '2023-10-13 15:56:27', '');
INSERT INTO `blog_article` VALUES ('25', '3', '132213', '31', '2023-10-13 16:54:43', '2023-10-13 16:54:43', '');
INSERT INTO `blog_article` VALUES ('26', '3', '2121', '32', '2023-10-13 19:44:32', '2023-10-13 19:44:32', '');
INSERT INTO `blog_article` VALUES ('27', '3', 'java锁', '33', '2023-10-14 18:39:59', '2023-10-14 19:01:32', '');
INSERT INTO `blog_article` VALUES ('28', '3', 'ThreadLocal', '34', '2023-10-14 18:42:01', '2023-10-14 18:42:01', '');
INSERT INTO `blog_article` VALUES ('29', '3', '抽象类', '35', '2023-10-14 19:13:25', '2023-10-14 20:07:34', '');
INSERT INTO `blog_article` VALUES ('30', '3', '数组', '36', '2023-10-14 19:14:27', '2023-10-14 19:14:27', '');
INSERT INTO `blog_article` VALUES ('31', '3', '解析JSON', '37', '2023-10-14 19:15:43', '2023-10-14 19:15:43', '');
INSERT INTO `blog_article` VALUES ('32', '3', 'Java集合', '38', '2023-10-14 19:18:18', '2023-10-14 19:18:18', '');
INSERT INTO `blog_article` VALUES ('33', '1', 'niaho', '39', '2023-11-14 19:56:26', '2023-11-14 19:56:26', '');

-- ----------------------------
-- Table structure for `blog_article_content_mapping`
-- ----------------------------
DROP TABLE IF EXISTS `blog_article_content_mapping`;
CREATE TABLE `blog_article_content_mapping` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `article_content_not_html` mediumtext COMMENT '文章内容',
  `article_content` mediumtext COMMENT '文章内容',
  `md_content` mediumtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='文章内容映射';

-- ----------------------------
-- Records of blog_article_content_mapping
-- ----------------------------
INSERT INTO `blog_article_content_mapping` VALUES ('6', '咏柳首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春', '<table data-line=\"0\">\n<thead>\n<tr>\n<th>咏柳</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春</td>\n</tr>\n</tbody>\n</table>\n', null);
INSERT INTO `blog_article_content_mapping` VALUES ('7', '咏柳首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春', '<table data-line=\"0\">\n<thead>\n<tr>\n<th>咏柳</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春</td>\n</tr>\n</tbody>\n</table>\n', '|咏柳|\n| - |\n|  首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春  |');
INSERT INTO `blog_article_content_mapping` VALUES ('8', '咏柳首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春', '<table data-line=\"0\">\n<thead>\n<tr>\n<th>咏柳</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春</td>\n</tr>\n</tbody>\n</table>\n', '|咏柳|\n| - |\n|  首句写树，柳树就像一位经过梳妆打扮的亭亭玉立的美人。柳，单单用碧玉来比有两层意思：一是碧玉这名字和柳的颜色有关，“碧”和下句的“绿”是互相生发、互为补充的。二是碧玉这个字在人们头脑中永远留下年轻的印象。“碧玉”二字用典而不露痕迹，南朝乐府有《碧玉歌》，其中“碧玉破瓜时”已成名句。还有南朝萧绎《采莲赋》有“碧玉小家女”，也很有名，后来形成“小家碧玉”这个成语。“碧玉妆成一树高”就自然地把眼前这棵柳树和那位古代质朴美丽的贫家少女联系起来，而且联想到她穿一身嫩绿，楚楚动人，充满青春  |');
INSERT INTO `blog_article_content_mapping` VALUES ('9', '水陆草木之花，可爱者甚蕃。晋陶渊明独爱菊。自李唐来，世人甚爱牡丹。予独爱莲之出淤泥而不染，濯清涟而不妖，中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉。予谓菊，花之隐逸者也；牡丹，花之富贵者也；莲，花之君子者也。噫！菊之爱，陶后鲜有闻。莲之爱，同予者何人？牡丹之爱，宜乎众矣！', '<p data-line=\"0\"><code>水陆草木之花，可爱者甚蕃。晋陶渊明独爱菊。自李唐来，世人甚爱牡丹。予独爱莲之出淤泥而不染，濯清涟而不妖，中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉。 予谓菊，花之隐逸者也；牡丹，花之富贵者也；莲，花之君子者也。噫！菊之爱，陶后鲜有闻。莲之爱，同予者何人？牡丹之爱，宜乎众矣！</code></p>\n', '`水陆草木之花，可爱者甚蕃。晋陶渊明独爱菊。自李唐来，世人甚爱牡丹。予独爱莲之出淤泥而不染，濯清涟而不妖，中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉。\n予谓菊，花之隐逸者也；牡丹，花之富贵者也；莲，花之君子者也。噫！菊之爱，陶后鲜有闻。莲之爱，同予者何人？牡丹之爱，宜乎众矣！`');
INSERT INTO `blog_article_content_mapping` VALUES ('10', '积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。', '<pre data-line=\"0\"><code class=\"language-language\" language=language><span class=\"code-block\">积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。\n故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；\n驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，\n筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者\n，用心躁也。</span></code></pre>\n', '```language\n积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。\n故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；\n驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，\n筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者\n，用心躁也。\n```\n');
INSERT INTO `blog_article_content_mapping` VALUES ('11', '人生若只如初见，何事秋风悲画扇。等闲变却故人心，却道故心人易变。骊山语罢清宵半，泪雨霖铃终不怨。何如薄幸锦衣郎，比翼连枝当日愿。', '<p data-line=\"0\">人生若只如初见，何事秋风悲画扇。</p>\n<p data-line=\"2\">等闲变却故人心，却道故心人易变。</p>\n<p data-line=\"4\">骊山语罢清宵半，泪雨霖铃终不怨。</p>\n<p data-line=\"6\">何如薄幸锦衣郎，比翼连枝当日愿。</p>\n', '人生若只如初见，何事秋风悲画扇。\n\n等闲变却故人心，却道故心人易变。\n\n骊山语罢清宵半，泪雨霖铃终不怨。\n\n何如薄幸锦衣郎，比翼连枝当日愿。');
INSERT INTO `blog_article_content_mapping` VALUES ('12', '211你好你好yesnolivepermentactivebackgroundnonorenjia211你好你好yesnolivepermentactivebackgroundnono211你好你好yesnolivepermentactivebackgroundnono211你好你好yesnolivepermentactivebackgroundnono211你好你好yesnolivepermentactivebackgroundnono211你好你好yesnolivepermentactivebackgroundnono211你好你好yesnolivepermentactivebackgroundnono211你好你好yesnolivepermentactivebackgroundnono', '<h1 data-line=\"0\" id=\"211\">211</h1>\n<ul data-line=\"1\">\n<li>你好</li>\n<li>你好</li>\n<li>yes</li>\n<li>no</li>\n<li>live</li>\n<li>perment</li>\n<li>active</li>\n<li>background</li>\n<li>nonorenjia</li>\n</ul>\n<h1 data-line=\"11\" id=\"211\">211</h1>\n<ul data-line=\"12\">\n<li>你好</li>\n<li>你好</li>\n<li>yes</li>\n<li>no</li>\n<li>live</li>\n<li>perment</li>\n<li>active</li>\n<li>background</li>\n<li>nono</li>\n</ul>\n<h1 data-line=\"22\" id=\"211\">211</h1>\n<ul data-line=\"23\">\n<li>你好</li>\n<li>你好</li>\n<li>yes</li>\n<li>no</li>\n<li>live</li>\n<li>perment</li>\n<li>active</li>\n<li>background</li>\n<li>nono</li>\n</ul>\n<h1 data-line=\"33\" id=\"211\">211</h1>\n<ul data-line=\"34\">\n<li>\n<p>你好</p>\n</li>\n<li>\n<p>你好</p>\n</li>\n<li>\n<p>yes</p>\n</li>\n<li>\n<p>no</p>\n</li>\n<li>\n<p>live</p>\n</li>\n<li>\n<p>perment</p>\n</li>\n<li>\n<p>active</p>\n</li>\n<li>\n<p>background</p>\n</li>\n<li>\n<p>nono</p>\n<h1>211</h1>\n</li>\n<li>\n<p>你好</p>\n</li>\n<li>\n<p>你好</p>\n</li>\n<li>\n<p>yes</p>\n</li>\n<li>\n<p>no</p>\n</li>\n<li>\n<p>live</p>\n</li>\n<li>\n<p>perment</p>\n</li>\n<li>\n<p>active</p>\n</li>\n<li>\n<p>background</p>\n</li>\n<li>\n<p>nono</p>\n</li>\n</ul>\n<h1 data-line=\"55\" id=\"211\">211</h1>\n<ul data-line=\"56\">\n<li>你好</li>\n<li>你好</li>\n<li>yes</li>\n<li>no</li>\n<li>live</li>\n<li>perment</li>\n<li>active</li>\n<li>background</li>\n<li>nono</li>\n</ul>\n<h1 data-line=\"65\" id=\"211\">211</h1>\n<ul data-line=\"66\">\n<li>你好</li>\n<li>你好</li>\n<li>yes</li>\n<li>no</li>\n<li>live</li>\n<li>perment</li>\n<li>active</li>\n<li>background</li>\n<li>nono</li>\n</ul>\n<h1 data-line=\"76\" id=\"211\">211</h1>\n<ul data-line=\"77\">\n<li>你好</li>\n<li>你好</li>\n<li>yes</li>\n<li>no</li>\n<li>live</li>\n<li>perment</li>\n<li>active</li>\n<li>background</li>\n<li>nono</li>\n</ul>\n', '# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nonorenjia\n\n# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono\n\n# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono\n\n# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono\n\n  # 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono\n\n# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono\n# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono\n\n# 211\n- 你好\n- 你好\n- yes\n- no\n- live\n- perment\n- active\n- background\n- nono');
INSERT INTO `blog_article_content_mapping` VALUES ('13', '11111', '<p data-line=\"0\">11111</p>\n', '11111');
INSERT INTO `blog_article_content_mapping` VALUES ('14', '11111', '<p data-line=\"0\">11111</p>\n', '11111');
INSERT INTO `blog_article_content_mapping` VALUES ('15', '213', '<p data-line=\"0\">213</p>\n', '213');
INSERT INTO `blog_article_content_mapping` VALUES ('16', '213', '<p data-line=\"0\">213</p>\n', '213');
INSERT INTO `blog_article_content_mapping` VALUES ('17', '11', '<p data-line=\"0\">11</p>\n', '11');
INSERT INTO `blog_article_content_mapping` VALUES ('18', '11', '<p data-line=\"0\">11</p>\n', '11');
INSERT INTO `blog_article_content_mapping` VALUES ('19', '11', '<p data-line=\"0\">11</p>\n', '11');
INSERT INTO `blog_article_content_mapping` VALUES ('20', '11', '<p data-line=\"0\">11</p>\n', '11');
INSERT INTO `blog_article_content_mapping` VALUES ('21', '111', '<p data-line=\"0\">111</p>\n', '111');
INSERT INTO `blog_article_content_mapping` VALUES ('22', '11', '<p data-line=\"0\">11</p>\n', '11');
INSERT INTO `blog_article_content_mapping` VALUES ('23', '11111111111111111111111111111111111111111111111111111111111111', '<p data-line=\"0\">11111111111111111111111111111111111111111111111111111111111111</p>\n', '11111111111111111111111111111111111111111111111111111111111111');
INSERT INTO `blog_article_content_mapping` VALUES ('24', '111324324111324324111324324111324324111324324111324324111324324111324324111324324', '<h1 data-line=\"0\" id=\"111\">111</h1>\n<p data-line=\"1\">324324</p>\n<h1 data-line=\"3\" id=\"111\">111</h1>\n<p data-line=\"4\">324324</p>\n<h1 data-line=\"5\" id=\"111\">111</h1>\n<p data-line=\"6\">324324</p>\n<h1 data-line=\"7\" id=\"111\">111</h1>\n<p data-line=\"8\">324324</p>\n<h1 data-line=\"9\" id=\"111\">111</h1>\n<p data-line=\"10\">324324</p>\n<h1 data-line=\"11\" id=\"111\">111</h1>\n<p data-line=\"12\">324324</p>\n<h1 data-line=\"13\" id=\"111\">111</h1>\n<p data-line=\"14\">324324</p>\n<h1 data-line=\"15\" id=\"111\">111</h1>\n<p data-line=\"16\">324324</p>\n<h1 data-line=\"17\" id=\"111\">111</h1>\n<p data-line=\"18\">324324</p>\n', '# 111\n324324\n\n# 111\n324324\n# 111\n324324\n# 111\n324324\n# 111\n324324\n# 111\n324324\n# 111\n324324\n# 111\n324324\n# 111\n324324');
INSERT INTO `blog_article_content_mapping` VALUES ('25', 'eqweqewqrqwrwqrwqrwqrwqrrqwrwqrqwrwerrqwwqrewqrewqrwqrwqrwrwqrwqrrqwrwqrqrrenrwqrwqrwqrwqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq', '<h1 data-line=\"0\" id=\"eqweqewq\">eqweqewq</h1>\n<p data-line=\"1\">rqwrwqrwqrwqrwqr<br>\nrqwrwqrqwrwer<br>\nrqwwqrewqrewq<br>\nrwqrwqrwrwqrwqr<br>\nrqwrwqrqr</p>\n<h1 data-line=\"6\" id=\"ren\">ren</h1>\n<p data-line=\"7\">rwqrwqrwqrwqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq</p>\n', '# eqweqewq\nrqwrwqrwqrwqrwqr\nrqwrwqrqwrwer\nrqwwqrewqrewq\nrwqrwqrwrwqrwqr\nrqwrwqrqr\n# ren\nrwqrwqrwqrwqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');
INSERT INTO `blog_article_content_mapping` VALUES ('26', 'eqweqewqrqwrwqrwqrwqrwqrrqwrwqrqwrwerrqwwqrewqrewqrwqrwqrwrwqrwqrrqwrwqrqrrenrwqrwqrwqrwqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq', '<h1 data-line=\"0\" id=\"eqweqewq\">eqweqewq</h1>\n<p data-line=\"1\">rqwrwqrwqrwqrwqr<br>\nrqwrwqrqwrwer<br>\nrqwwqrewqrewq<br>\nrwqrwqrwrwqrwqr<br>\nrqwrwqrqr</p>\n<h1 data-line=\"6\" id=\"ren\">ren</h1>\n<p data-line=\"7\">rwqrwqrwqrwqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq</p>\n', '# eqweqewq\nrqwrwqrwqrwqrwqr\nrqwrwqrqwrwer\nrqwwqrewqrewq\nrwqrwqrwrwqrwqr\nrqwrwqrqr\n# ren\nrwqrwqrwqrwqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');
INSERT INTO `blog_article_content_mapping` VALUES ('27', 'renjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjia', '<h1 data-line=\"0\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"2\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"3\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"4\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"5\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"6\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"7\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"8\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"10\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"11\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"12\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"13\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"14\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"15\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"16\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"18\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"19\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"20\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"21\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"22\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"23\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"24\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"26\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"27\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"28\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"29\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"30\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"31\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"32\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"34\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"35\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"36\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"37\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"38\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"39\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"40\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"42\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"43\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"44\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"45\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"46\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"47\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"48\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"50\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"51\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"52\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"53\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"54\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"55\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"56\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"58\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"59\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"60\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"61\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"62\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"63\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"64\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"66\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"67\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"68\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"69\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"70\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"71\" id=\"renjia\">renjia</h1>\n', '# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia');
INSERT INTO `blog_article_content_mapping` VALUES ('28', 'renjiazyhliverenjiarenjiarenjiarenjiarenjiarenjia', '<h1 data-line=\"0\" id=\"renjia\">renjia</h1>\n<h2 data-line=\"1\" id=\"zyh\">zyh</h2>\n<h2 data-line=\"2\" id=\"live\">live</h2>\n<h1 data-line=\"4\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"5\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"6\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"7\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"8\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"9\" id=\"renjia\">renjia</h1>\n', '# renjia\n## zyh\n## live\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia');
INSERT INTO `blog_article_content_mapping` VALUES ('29', 'renjiazyhliverenjiarenjiarenjiarenjiarenjiarenjia', '<h1 data-line=\"0\" id=\"renjia\">renjia</h1>\n<h2 data-line=\"1\" id=\"zyh\">zyh</h2>\n<h2 data-line=\"2\" id=\"live\">live</h2>\n<h1 data-line=\"4\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"5\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"6\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"7\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"8\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"9\" id=\"renjia\">renjia</h1>\n', '# renjia\n## zyh\n## live\n\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia');
INSERT INTO `blog_article_content_mapping` VALUES ('30', 'renjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjiarenjia', '<h1 data-line=\"0\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"1\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"2\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"3\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"4\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"5\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"6\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"7\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"8\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"9\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"10\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"11\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"12\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"13\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"14\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"15\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"16\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"17\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"18\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"19\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"20\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"21\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"22\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"23\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"24\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"25\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"26\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"27\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"28\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"29\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"30\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"31\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"32\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"33\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"34\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"35\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"36\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"37\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"38\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"39\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"40\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"41\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"42\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"43\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"44\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"45\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"46\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"47\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"48\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"49\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"50\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"51\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"52\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"53\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"54\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"55\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"56\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"57\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"58\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"59\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"60\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"61\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"62\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"63\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"64\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"65\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"66\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"67\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"68\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"69\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"70\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"71\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"72\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"73\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"74\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"75\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"76\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"77\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"78\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"79\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"80\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"81\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"82\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"83\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"84\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"85\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"86\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"87\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"88\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"89\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"90\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"91\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"92\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"93\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"94\" id=\"renjia\">renjia</h1>\n<h1 data-line=\"95\" id=\"renjia\">renjia</h1>\n', '# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia\n# renjia');
INSERT INTO `blog_article_content_mapping` VALUES ('31', '12132121111renjiazyh', '<h1 data-line=\"0\" id=\"12132121\">12132121</h1>\n<ul data-line=\"1\">\n<li>111</li>\n<li>\n<h2>renjia</h2>\n</li>\n<li>\n<h1>zyh</h1>\n</li>\n</ul>\n', '# 12132121\n- 111\n- ## renjia\n- # zyh');
INSERT INTO `blog_article_content_mapping` VALUES ('32', 'renjirenjianjkjayesfalseddddkdsadlyue', '<h1 data-line=\"0\" id=\"renji\">renji</h1>\n<ul data-line=\"1\">\n<li>renjia</li>\n<li>njkja</li>\n<li>\n<h1>yes</h1>\n</li>\n<li>\n<h2>false</h2>\n</li>\n</ul>\n<h1 data-line=\"6\" id=\"dddd\">dddd</h1>\n<ul data-line=\"7\">\n<li>kdsadl</li>\n</ul>\n<h2 data-line=\"9\" id=\"yue\">yue</h2>\n', '# renji\n- renjia\n- njkja\n- # yes\n- ## false\n\n# dddd\n- kdsadl\n\n## yue');
INSERT INTO `blog_article_content_mapping` VALUES ('33', '如何获得当前文件路径(1).Test.class.getResource()得到的是当前类FileTest.class文件的URI目录。不包括自己(2).Test.class.getResource(/)得到的是当前的classpath的绝对URI路径。(3).Thread.currentThread().getContextClassLoader().getResource()得到的也是当前ClassPath的绝对URI路径。(4).Test.class.getClassLoader().getResource()得到的也是当前ClassPath的绝对URI路径。(5).ClassLoader.getSystemResource()得到的也是当前ClassPath的绝对URI路径。(6)newFile().getAbsolutePath()也可用。尽量不要使用相对于System.getProperty(user.dir)当前用户目录的相对路径，后面可以看出得出结果五花八门。Web服务器(1).如何读文件使用ServletContext.getResourceAsStream()就可以(2).获得文件真实路径Stringfile_real_path=ServletContext.getRealPath(mypath/filename);不建议使用request.getRealPath(/);使用java.util.Properties类的load()方法：使用绝对路径URLresource=Resoures_properties.class.getResource();Stringpath=resource.getPath();InputStreambufferedInputStream=newBufferedInputStream(newFileInputStream(path+properties/jdbc.properties));Propertiesproperties=newProperties();properties.load(bufferedInputStream);Stringurl=properties.getProperty(url);System.out.println(url);使用java.util.Resourcebundle类的getbundle()方法：文件存放在工程的resource目录下，或者lib目录下、或者可以放在src目录其他包下，也可以不放....用来读取项目中后缀为properties的配置文件ResourceBundleresource=ResourceBundle.getBundle(jdbc);StringclassName=resource.getString(database.driver);使用java.util.PropertyResourceBundle类的getBundle函数：properties文件存放在工程的resource目录下或放在src下,可以放在src目录其他包下，也可以不放PropertyResourceBundlepropertyResourceBundle=(PropertyResourceBundle)PropertyResourceBundle.getBundle(properties/jdbc);Stringurl=propertyResourceBundle.getString(url);System.out.println(url);使用class变量的getResourceAsStream()方法：包点类名下的。或存放在工程的resource目录下，这时要从classpath的根访问如果找不到带有该名称的资源，则返回nullInputStreamin=类名.class.getResourceAsStream(properties/jdbc.properties);Propertiesp=newProperties();p.load(in);System.out.println(p.getProperty(database.url));使用class.getclassloader()所得到的java.lang.classloader的getResourceAsStream()方法:properties文件存放在工程的resource目录下或放在src下面，否则找不到啊,可以放在src目录其他包下，也可以不放InputStreamin=类名.class.getClassLoader().getResourceAsStream(jdbc.properties);Propertiesp=newProperties();p.load(in);System.out.println(p.getProperty(database.pass));使用java.lang.classloader类的getSystemResourceAsStream()静态方法properties文件存放在工程的resource目录下或放在src下,可以放在src目录其他包下，也可以不放InputStreamin=ClassLoader.getSystemResourceAsStream(properties/jdbc.properties);Propertiesp=newProperties();p.load(in);System.out.println(p.getProperty(database.user));', '<h2 data-line=\"0\" id=\"如何获得当前文件路径\">如何获得当前文件路径</h2>\n<p data-line=\"2\">(1).Test.class.getResource(&quot;&quot;)</p>\n<blockquote data-line=\"4\">\n<p>得到的是当前类FileTest.class文件的URI目录。不包括自己</p>\n</blockquote>\n<p data-line=\"6\">(2).Test.class.getResource(&quot;/&quot;)</p>\n<blockquote data-line=\"8\">\n<p>得到的是当前的classpath的绝对URI路径。</p>\n</blockquote>\n<p data-line=\"10\">(3).Thread.currentThread().getContextClassLoader().getResource(&quot;&quot;)</p>\n<blockquote data-line=\"12\">\n<p>得到的也是当前ClassPath的绝对URI路径。</p>\n</blockquote>\n<p data-line=\"14\">(4).Test.class.getClassLoader().getResource(&quot;&quot;)</p>\n<blockquote data-line=\"16\">\n<p>得到的也是当前ClassPath的绝对URI路径。</p>\n</blockquote>\n<p data-line=\"18\">(5).ClassLoader.getSystemResource(&quot;&quot;)</p>\n<blockquote data-line=\"20\">\n<p>得到的也是当前ClassPath的绝对URI路径。</p>\n</blockquote>\n<p data-line=\"22\">(6) new File(&quot;&quot;).getAbsolutePath()也可用。</p>\n<p data-line=\"24\">尽量不要使用相对于System.getProperty(&quot;user.dir&quot;)当前用户目录的相对路径，后面可以看出得出结果五花八门。</p>\n<h2 data-line=\"26\" id=\"Web服务器\">Web服务器</h2>\n<p data-line=\"27\">(1).如何读文件</p>\n<blockquote data-line=\"29\">\n<p>使用ServletContext.getResourceAsStream()就可以</p>\n</blockquote>\n<p data-line=\"31\">(2).获得文件真实路径</p>\n<blockquote data-line=\"33\">\n<p>String   file_real_path=ServletContext.getRealPath(&quot;mypath/filename&quot;);</p>\n</blockquote>\n<p data-line=\"35\"><s>不建议使用request.getRealPath(&quot;/&quot;);</s></p>\n<h1 data-line=\"37\" id=\"使用java.util.Properties类的load()方法：\">使用java.util.Properties类的load()方法：</h1>\n<blockquote data-line=\"39\">\n<p><strong>使用绝对路径</strong></p>\n</blockquote>\n<pre data-line=\"41\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-type\">URL</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> Resoures_properties.class.getResource(<span class=\"hljs-string\">&quot;&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> resource.getPath();\n\n        <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">bufferedInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(path+ <span class=\"hljs-string\">&quot;properties/jdbc.properties&quot;</span>));\n        <span class=\"hljs-type\">Properties</span> <span class=\"hljs-variable\">properties</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();\n        properties.load(bufferedInputStream);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">url</span> <span class=\"hljs-operator\">=</span> properties.getProperty(<span class=\"hljs-string\">&quot;url&quot;</span>);\n        System.out.println(url);</span></code></pre>\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\" data-line=\"51\">\n<h1 data-line=\"53\" id=\"使用java.util.Resourcebundle类的getbundle()方法  ：\">使用java.util.Resourcebundle类的getbundle()方法  ：</h1>\n<blockquote data-line=\"55\">\n<p><strong>文件存放在工程的resource目录下，或者lib目录下、或者可以放在src目录其他包下，也可以不放....用来读取项目中后缀为properties的配置文件</strong></p>\n</blockquote>\n<pre data-line=\"56\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-type\">ResourceBundle</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> ResourceBundle.getBundle(<span class=\"hljs-string\">&quot;jdbc&quot;</span>);  \n<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">className</span> <span class=\"hljs-operator\">=</span> resource.getString(<span class=\"hljs-string\">&quot;database.driver&quot;</span>);</span></code></pre>\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\" data-line=\"60\">\n<h2 data-line=\"62\" id=\"使用java.util.PropertyResourceBundle类的getBundle函数：\">使用java.util.PropertyResourceBundle类的getBundle函数：</h2>\n<blockquote data-line=\"64\">\n<p><strong>properties 文件存放在工程的resource目录下或 放在src下,可以放在src目录其他包下，也可以不放</strong></p>\n</blockquote>\n<pre data-line=\"65\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-type\">PropertyResourceBundle</span> <span class=\"hljs-variable\">propertyResourceBundle</span> <span class=\"hljs-operator\">=</span> (PropertyResourceBundle) PropertyResourceBundle.getBundle(<span class=\"hljs-string\">&quot;properties/jdbc&quot;</span>);\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">url</span> <span class=\"hljs-operator\">=</span> propertyResourceBundle.getString(<span class=\"hljs-string\">&quot;url&quot;</span>);\n        System.out.println(url);</span></code></pre>\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\" data-line=\"70\">\n<h1 data-line=\"72\" id=\"使用class变量的getResourceAsStream()方法：\">使用class变量的getResourceAsStream()方法：</h1>\n<blockquote data-line=\"74\">\n<p><strong>包点类名下的。或存放在工程的resource目录下，这时要从classpath的根访问</strong><br>\n如果找不到带有该名称的资源，则返回 null</p>\n</blockquote>\n<pre data-line=\"77\"><code class=\"language-\" language=><span class=\"code-block\">InputStream  <span class=\"hljs-keyword\">in</span>=类名.<span class=\"hljs-keyword\">class</span>.getResourceAsStream(<span class=\"hljs-string\">&quot;properties/jdbc.properties&quot;</span>); \nProperties p = <span class=\"hljs-keyword\">new</span> Properties();\np.load(<span class=\"hljs-keyword\">in</span>);\nSystem.<span class=\"hljs-keyword\">out</span>.println(p.getProperty(<span class=\"hljs-string\">&quot;database.url&quot;</span>));</span></code></pre>\n<h2 data-line=\"84\" id=\"使用class.getclassloader()所得到的java.lang.classloader的getResourceAsStream()方法:\">使用class.getclassloader()所得到的java.lang.classloader的getResourceAsStream()方法:</h2>\n<blockquote data-line=\"87\">\n<p>properties 文件 存放在工程的resource目录下或放在src下面，否则找不到啊,可以放在src目录其他包下，也可以不放</p>\n</blockquote>\n<pre data-line=\"89\"><code class=\"language-\" language=><span class=\"code-block\">InputStream <span class=\"hljs-keyword\">in</span> = 类名.<span class=\"hljs-keyword\">class</span>.getClassLoader().getResourceAsStream(<span class=\"hljs-string\">&quot;jdbc.properties&quot;</span>);\nProperties p = <span class=\"hljs-keyword\">new</span> Properties() ;\np.load(<span class=\"hljs-keyword\">in</span>); \nSystem.<span class=\"hljs-keyword\">out</span>.println(p.getProperty(<span class=\"hljs-string\">&quot;database.pass&quot;</span>));</span></code></pre>\n<h2 data-line=\"96\" id=\"使用java.lang.classloader类的getSystemResourceAsStream()静态方法\">使用java.lang.classloader类的getSystemResourceAsStream()静态方法</h2>\n<blockquote data-line=\"98\">\n<p>properties 文件 存放在工程的resource目录下或放在src下,可以放在src目录其他包下，也可以不放</p>\n</blockquote>\n<pre data-line=\"100\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> ClassLoader.getSystemResourceAsStream(<span class=\"hljs-string\">&quot;properties/jdbc.properties&quot;</span>); \n<span class=\"hljs-type\">Properties</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>() ;\np.load(in) ;\nSystem.out.println(p.getProperty(<span class=\"hljs-string\">&quot;database.user&quot;</span>));</span></code></pre>\n', '## 如何获得当前文件路径\n\n(1).Test.class.getResource(\"\")\n\n> 得到的是当前类FileTest.class文件的URI目录。不包括自己\n\n(2).Test.class.getResource(\"/\")\n\n> 得到的是当前的classpath的绝对URI路径。\n\n(3).Thread.currentThread().getContextClassLoader().getResource(\"\")\n\n> 得到的也是当前ClassPath的绝对URI路径。\n\n(4).Test.class.getClassLoader().getResource(\"\")\n\n> 得到的也是当前ClassPath的绝对URI路径。\n\n(5).ClassLoader.getSystemResource(\"\")\n\n> 得到的也是当前ClassPath的绝对URI路径。\n\n(6) new File(\"\").getAbsolutePath()也可用。\n\n尽量不要使用相对于System.getProperty(\"user.dir\")当前用户目录的相对路径，后面可以看出得出结果五花八门。\n\n## Web服务器\n(1).如何读文件\n\n> 使用ServletContext.getResourceAsStream()就可以\n\n(2).获得文件真实路径\n\n> String   file_real_path=ServletContext.getRealPath(\"mypath/filename\");\n\n~~不建议使用request.getRealPath(\"/\");~~ \n\n# 使用java.util.Properties类的load()方法：\n\n> **使用绝对路径**\n\n```\nURL resource = Resoures_properties.class.getResource(\"\");\n        String path = resource.getPath();\n\n        InputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(path+ \"properties/jdbc.properties\"));\n        Properties properties = new Properties();\n        properties.load(bufferedInputStream);\n        String url = properties.getProperty(\"url\");\n        System.out.println(url);\n```\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n# 使用java.util.Resourcebundle类的getbundle()方法  ：\n\n> **文件存放在工程的resource目录下，或者lib目录下、或者可以放在src目录其他包下，也可以不放....用来读取项目中后缀为properties的配置文件**\n```\nResourceBundle resource = ResourceBundle.getBundle(\"jdbc\");  \nString className = resource.getString(\"database.driver\");\n```\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n## 使用java.util.PropertyResourceBundle类的getBundle函数：\n\n> **properties 文件存放在工程的resource目录下或 放在src下,可以放在src目录其他包下，也可以不放**\n```\nPropertyResourceBundle propertyResourceBundle = (PropertyResourceBundle) PropertyResourceBundle.getBundle(\"properties/jdbc\");\n        String url = propertyResourceBundle.getString(\"url\");\n        System.out.println(url);\n```\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n\n# 使用class变量的getResourceAsStream()方法：\n\n> **包点类名下的。或存放在工程的resource目录下，这时要从classpath的根访问**\n>  如果找不到带有该名称的资源，则返回 null\n\n```\nInputStream  in=类名.class.getResourceAsStream(\"properties/jdbc.properties\"); \nProperties p = new Properties();\np.load(in);\nSystem.out.println(p.getProperty(\"database.url\")); \n```\n\n## 使用class.getclassloader()所得到的java.lang.classloader的getResourceAsStream()方法:\n\n\n>  properties 文件 存放在工程的resource目录下或放在src下面，否则找不到啊,可以放在src目录其他包下，也可以不放\n\n```\nInputStream in = 类名.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");\nProperties p = new Properties() ;\np.load(in); \nSystem.out.println(p.getProperty(\"database.pass\"));\n```\n\n## 使用java.lang.classloader类的getSystemResourceAsStream()静态方法\n\n>  properties 文件 存放在工程的resource目录下或放在src下,可以放在src目录其他包下，也可以不放\n\n```\nInputStream in = ClassLoader.getSystemResourceAsStream(\"properties/jdbc.properties\"); \nProperties p = new Properties() ;\np.load(in) ;\nSystem.out.println(p.getProperty(\"database.user\"));\n```\n');
INSERT INTO `blog_article_content_mapping` VALUES ('34', '一、ThreadLocal是什么？从名字我们就可以看到ThreadLocal叫做本地线程变量，意思是ThreadLocal中填充的的是当前线程的变量，该变量对其他线程而言是封闭且隔离的，ThreadLocal为变量在每个线程中创建了一个副本，这样每个线程都可以访问自己内部的副本变量。使用场景在进行对象跨层传递的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束。线程间数据隔离进行事务操作，用于存储线程事务信息。数据库连接，Session会话管理。二、ThreadLocal怎么用？publicclassThreadLocalApplication{privatestaticThreadLocal<String>local=newThreadLocal<>();publicstaticvoidmain(String[]args){IntStream.range(0,10).forEach(i->{newThread(()->{local.set(Thread.currentThread().getName());System.out.println(local.get());}).start();});}}源码解析publicvoidset(Tvalue){Threadt=Thread.currentThread();//获取当前线程ThreadLocalMapmap=getMap(t);if(map!=null)map.set(this,value);//不为空、覆盖值elsecreateMap(t,value);//为空、创建ThreadLocalMap，进行存储}voidcreateMap(Threadt,TfirstValue){t.threadLocals=newThreadLocalMap(this,firstValue);}publicTget(){Threadt=Thread.currentThread();//获取当前线程ThreadLocalMapmap=getMap(t);//获取ThreadLocalMapif(map!=null){ThreadLocalMap.Entrye=map.getEntry(this);//获取ThreadLocalMap的储存值的Entryif(e!=null){@SuppressWarnings(unchecked)Tresult=(T)e.value;returnresult;}}returnsetInitialValue();}privateEntrygetEntry(ThreadLocal<?>key){inti=key.threadLocalHashCode&(table.length-1);Entrye=table[i];if(e!=null&&e.get()==key)returne;elsereturngetEntryAfterMiss(key,i,e);}三、ThreadLocal内存泄漏问题ThreadLocal是一个弱引用，当为null时，会被当成垃圾回收。每一个Thread都有一个ThreadLocal.ThreadLocalMap这样的类型变量，该变量的名字叫作threadLocals。线程在访问了ThreadLocal之后，都会在它的ThreadLocalMap里面的Entry中去维护该ThreadLocal变量与具体实例的映射。重点来了，突然我们ThreadLocal是null了，也就是要被垃圾回收器回收了，但是此时我们的ThreadLocalMap（thread的内部属性）生命周期和Thread的一样，它不会回收，这时候就出现了一个现象。那就是ThreadLocalMap的key没了，但是value还在，这就造成了内存泄漏。解决办法：使用完ThreadLocal后，执行remove操作，避免出现内存溢出情况。所以如同lock的操作最后要执行解锁操作一样，ThreadLocal使用完毕一定记得执行remove方法，清除当前线程的数值。如果不remove当前线程对应的VALUE,就会一直存在这个值。使用了线程池，可以达到“线程复用”的效果。但是归还线程之前记得清除ThreadLocalMap，要不然再取出该线程的时候，ThreadLocal变量还会存在。这就不仅仅是内存泄露的问题了，整个业务逻辑都可能会出错。JDK同样也考虑到了这个问题，在执行ThreadLocal的set、remove、rehash等方法时，它都会扫描key为null的Entry，如果发现某个Entry的key为null，则代表它所对应的value也没有作用了，所以它就会把对应的value置为null，这样，value对象就可以被正常回收了', '<h1 data-line=\"0\" id=\"一、 ThreadLocal是什么？\">一、 ThreadLocal是什么？</h1>\n<p data-line=\"1\">从名字我们就可以看到<font color=\'42b983\'><b>ThreadLocal 叫做本地线程变量</b></font>，意思是ThreadLocal 中填充的的是当前线程的变量，该变量对其他线程而言是封闭且隔离的，ThreadLocal 为变量在每个线程中创建了一个副本，这样每个线程都可以访问自己内部的副本变量。</p>\n<blockquote data-line=\"3\">\n<p><font color=\'42b983\'><b>使用场景</b></font></p>\n</blockquote>\n<ul data-line=\"5\">\n<li>在进行对象跨层传递的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束。</li>\n<li>线程间数据隔离</li>\n<li>进行事务操作，用于存储线程事务信息。</li>\n<li>数据库连接，Session会话管理。</li>\n</ul>\n<h2 data-line=\"10\" id=\"二、 ThreadLocal怎么用？\">二、 ThreadLocal怎么用？</h2>\n<pre data-line=\"12\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThreadLocalApplication</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;String&gt; local = <span class=\"hljs-keyword\">new</span> ThreadLocal&lt;&gt;();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> {\n        IntStream.range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>).forEach(i -&gt; {\n            <span class=\"hljs-keyword\">new</span> Thread(()-&gt;{\n                local.<span class=\"hljs-keyword\">set</span>(Thread.currentThread().getName());\n                System.<span class=\"hljs-keyword\">out</span>.println(local.<span class=\"hljs-keyword\">get</span>());\n            }).start();\n        });\n    }\n}</span></code></pre>\n<blockquote data-line=\"29\">\n<p><font color=\'42b983\'><b>源码解析</b></font></p>\n</blockquote>\n<pre data-line=\"31\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(T value)</span> {\n        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();   <span class=\"hljs-comment\">//获取当前线程</span>\n        <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t);    \n        <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>)   \n            map.set(<span class=\"hljs-built_in\">this</span>, value);    <span class=\"hljs-comment\">//不为空、覆盖值</span>\n        <span class=\"hljs-keyword\">else</span>\n            createMap(t, value);   <span class=\"hljs-comment\">//为空、创建ThreadLocalMap，进行存储</span>\n    }</span></code></pre>\n<pre data-line=\"42\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createMap</span>(<span class=\"hljs-params\">Thread t, T firstValue</span>) {\n        t.<span class=\"hljs-property\">threadLocals</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocalMap</span>(<span class=\"hljs-variable language_\">this</span>, firstValue);\n    }</span></code></pre>\n<pre data-line=\"48\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Thread.currentThread();   <span class=\"hljs-comment\">//获取当前线程</span>\n        <span class=\"hljs-type\">ThreadLocalMap</span> <span class=\"hljs-variable\">map</span> <span class=\"hljs-operator\">=</span> getMap(t);   <span class=\"hljs-comment\">//获取ThreadLocalMap</span>\n        <span class=\"hljs-keyword\">if</span> (map != <span class=\"hljs-literal\">null</span>) {\n            ThreadLocalMap.<span class=\"hljs-type\">Entry</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> map.getEntry(<span class=\"hljs-built_in\">this</span>);   <span class=\"hljs-comment\">//获取ThreadLocalMap的储存值的Entry</span>\n            <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span>\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (T)e.value;\n                <span class=\"hljs-keyword\">return</span> result;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> setInitialValue();\n    }</span></code></pre>\n<pre data-line=\"64\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Entry <span class=\"hljs-title\">getEntry</span>(<span class=\"hljs-params\">ThreadLocal&lt;?&gt; key</span>)</span> {\n            <span class=\"hljs-built_in\">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class=\"hljs-number\">1</span>);\n            Entry e = table[i];\n            <span class=\"hljs-keyword\">if</span> (e != <span class=\"hljs-literal\">null</span> &amp;&amp; e.<span class=\"hljs-keyword\">get</span>() == key)\n                <span class=\"hljs-keyword\">return</span> e;\n            <span class=\"hljs-keyword\">else</span>\n                <span class=\"hljs-keyword\">return</span> getEntryAfterMiss(key, i, e);\n        }</span></code></pre>\n<h2 data-line=\"75\" id=\"三、ThreadLocal 内存泄漏问题\">三、ThreadLocal 内存泄漏问题</h2>\n<blockquote data-line=\"77\">\n<p>ThreadLocal是一个弱引用，当为null时，会被当成垃圾回收 。每一个 Thread 都有一个 ThreadLocal.ThreadLocalMap 这样的类型变量，该变量的名字叫作 threadLocals。线程在访问了 ThreadLocal 之后，都会在它的 ThreadLocalMap 里面的 Entry 中去维护该 ThreadLocal 变量与具体实例的映射。</p>\n</blockquote>\n<p data-line=\"79\">重点来了，突然我们ThreadLocal是null了，也就是要被垃圾回收器回收了，但是此时我们的ThreadLocalMap（thread 的内部属性）生命周期和Thread的一样，它不会回收，这时候就出现了一个现象。那就是ThreadLocalMap的key没了，但是value还在，这就造成了内存泄漏。<br>\n<font color=\'42b983\'><b>解决办法：使用完ThreadLocal后，执行remove操作，避免出现内存溢出情况。</p>\n<p data-line=\"82\">所以 如同 lock 的操作 最后要执行解锁操作一样，ThreadLocal使用完毕一定记得执行remove 方法，清除当前线程的数值。</p>\n<p data-line=\"84\">如果不remove 当前线程对应的VALUE ,就会一直存在这个值。</p>\n<p data-line=\"86\">使用了线程池，可以达到“线程复用”的效果。但是归还线程之前记得清除ThreadLocalMap，要不然再取出该线程的时候，ThreadLocal变量还会存在。这就不仅仅是内存泄露的问题了，整个业务逻辑都可能会出错。</p>\n<blockquote data-line=\"88\">\n<p>JDK 同样也考虑到了这个问题，在执行 ThreadLocal 的 set、remove、rehash 等方法时，它都会扫描 key 为 null 的 Entry，如果发现某个 Entry 的 key 为 null，则代表它所对应的 value 也没有作用了，所以它就会把对应的 value 置为 null，这样，value 对象就可以被正常回收了</p>\n</blockquote>\n', '# 一、 ThreadLocal是什么？\n从名字我们就可以看到<font color=\'42b983\'><b>ThreadLocal 叫做本地线程变量</b></font>，意思是ThreadLocal 中填充的的是当前线程的变量，该变量对其他线程而言是封闭且隔离的，ThreadLocal 为变量在每个线程中创建了一个副本，这样每个线程都可以访问自己内部的副本变量。\n\n> <font color=\'42b983\'><b>使用场景</b></font>\n\n - 在进行对象跨层传递的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束。\n - 线程间数据隔离\n - 进行事务操作，用于存储线程事务信息。\n - 数据库连接，Session会话管理。\n\n## 二、 ThreadLocal怎么用？\n\n```\npublic class ThreadLocalApplication {\n\n    private static ThreadLocal<String> local = new ThreadLocal<>();\n\n    public static void main(String[] args) {\n        IntStream.range(0, 10).forEach(i -> {\n            new Thread(()->{\n                local.set(Thread.currentThread().getName());\n                System.out.println(local.get());\n            }).start();\n        });\n    }\n}\n```\n\n\n> <font color=\'42b983\'><b>源码解析</b></font>\n\n```\npublic void set(T value) {\n        Thread t = Thread.currentThread();   //获取当前线程\n        ThreadLocalMap map = getMap(t);    \n        if (map != null)   \n            map.set(this, value);    //不为空、覆盖值\n        else\n            createMap(t, value);   //为空、创建ThreadLocalMap，进行存储\n    }\n```\n\n```\n void createMap(Thread t, T firstValue) {\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n    }\n```\n\n```\n  public T get() {\n        Thread t = Thread.currentThread();   //获取当前线程\n        ThreadLocalMap map = getMap(t);   //获取ThreadLocalMap\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);   //获取ThreadLocalMap的储存值的Entry\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();\n    }\n```\n\n```\n private Entry getEntry(ThreadLocal<?> key) {\n            int i = key.threadLocalHashCode & (table.length - 1);\n            Entry e = table[i];\n            if (e != null && e.get() == key)\n                return e;\n            else\n                return getEntryAfterMiss(key, i, e);\n        }\n```\n\n## 三、ThreadLocal 内存泄漏问题\n\n> ThreadLocal是一个弱引用，当为null时，会被当成垃圾回收 。每一个 Thread 都有一个 ThreadLocal.ThreadLocalMap 这样的类型变量，该变量的名字叫作 threadLocals。线程在访问了 ThreadLocal 之后，都会在它的 ThreadLocalMap 里面的 Entry 中去维护该 ThreadLocal 变量与具体实例的映射。\n\n重点来了，突然我们ThreadLocal是null了，也就是要被垃圾回收器回收了，但是此时我们的ThreadLocalMap（thread 的内部属性）生命周期和Thread的一样，它不会回收，这时候就出现了一个现象。那就是ThreadLocalMap的key没了，但是value还在，这就造成了内存泄漏。\n<font color=\'42b983\'><b>解决办法：使用完ThreadLocal后，执行remove操作，避免出现内存溢出情况。\n\n所以 如同 lock 的操作 最后要执行解锁操作一样，ThreadLocal使用完毕一定记得执行remove 方法，清除当前线程的数值。\n\n如果不remove 当前线程对应的VALUE ,就会一直存在这个值。\n\n使用了线程池，可以达到“线程复用”的效果。但是归还线程之前记得清除ThreadLocalMap，要不然再取出该线程的时候，ThreadLocal变量还会存在。这就不仅仅是内存泄露的问题了，整个业务逻辑都可能会出错。\n\n> JDK 同样也考虑到了这个问题，在执行 ThreadLocal 的 set、remove、rehash 等方法时，它都会扫描 key 为 null 的 Entry，如果发现某个 Entry 的 key 为 null，则代表它所对应的 value 也没有作用了，所以它就会把对应的 value 置为 null，这样，value 对象就可以被正常回收了\n');
INSERT INTO `blog_article_content_mapping` VALUES ('35', '代码块抽象类不能被实例化常见问题代码块普通代码块:在执行的流程中出现的代码块，我们称其为普通代码块。构造代码块在类中的成员代码块，我们称其为构造代码块，在每次对象创建时执行，执行在构造方法之前。静态代码块在类中使用static修饰的成员代码块，我们称其为静态代码块，在类加载时执行。每次程序启动到关闭，只会执行一次的代码块。同步代码块在后续多线程技术中学习。面试题：构造方法与构造代码块以及静态代码块的执行顺序：        静态代码块-->构造代码块-->构造方法抽象类概念：	抽象类必须使用abstractclass声明	一个抽象类中可以没有抽象方法。抽象方法必须写在抽象类或者接口中。		格式：abstractclass类名{//抽象类			}抽象方法只声明而未实现的方法称为抽象方法（未实现指的是：没有“{}”方法体），抽象方法必须使用abstract关键字声明。			格式：abstractclass类名{//抽象类			publicabstractvoid方法名();//抽象方法，只声明而未实现			}不能被实例化在抽象类的使用中有几个原则：	·抽象类本身是不能直接进行实例化操作的，即：不能直接使用关键字new完成。	·一个抽象类必须被子类所继承，被继承的子类（如果不是抽象类）则必须覆写(重写)抽象类中的全部抽象方法。常见问题    1、抽象类能否使用final声明？不能，因为final属修饰的类是不能有子类的，而抽象类必须有子类才有意义，所以不能。    2、常见抽象类能否有构造方法？能有构造方法，而且子类对象实例化的时候的流程与普通类的继承是一样的，都是要先调用父类中的构造方法（默认是无参的），之后再调用子类自己的构造方法。    3、抽象类和普通类的区别1、抽象类必须用public或protected修饰(如果为private修饰，那么子类则无法继承，也就无法实现其抽象方法）。默认缺省为public2、抽象类不可以使用new关键字创建对象，但是在子类创建对象时，抽象父类也会被JVM实例化。3、如果一个子类继承抽象类，那么必须实现其所有的抽象方法。如果有未实现的抽象方法，那么子类也必须定义为abstract类', '<p data-line=\"0\"><a href=\"#one\"><font color=\"#00000\"><b>代码块<b/></a><br>\n<a href=\"#two\"><font color=\"#00000\"><b>抽象类<b/></a><br>\n<a href=\"#there\"><font color=\"#00000\"><b>不能被实例化</b></a><br>\n<a href=\"#four\"><font color=\"#00000\"><b>常见问题</b></a></p>\n<h4 id=\"one\"  data-line=\"6\"><font color=\"#00000\">代码块</h4>\n<blockquote data-line=\"8\">\n<p>普通代码块: 在执行的流程中 出现的 代码块， 我们称其为普通代码块。<br/><br>\n构造代码块 在类中的成员代码块， 我们称其为构造代码块， 在每次对象创建时执行， 执行在构造方法之前。<br/><br>\n静态代码块 在类中使用static修饰的成员代码块， 我们称其为静态代码块， 在类加载时执行。 每次程序启动到关闭 ，只会执行一次的代码块。<br/><br>\n同步代码块 在后续多线程技术中学习。<br/><br>\n面试题： 构造方法 与 构造代码块 以及 静态代码块的执行顺序：<br/>         静态代码块 --&gt; 构造代码块 --&gt; 构造方法</p>\n</blockquote>\n<h4 id=\"two\"  data-line=\"15\"><font color=\"#00000\">抽象类</h4>\n<blockquote data-line=\"17\">\n<p>概念： 	<br>\n抽象类必须使用abstract class声明 	一个抽象类中可以没有抽象方法。抽象方法必须写在抽象类或者接口中。 	<br/>	<br>\n格式：<br>\nabstract class 类名<br>\n{ // 抽象类 			<br>\n} 抽象方法<br>\n只声明而未实现的方法称为抽象方法（未实现指的是：没有“{}”方法体），抽象方法必须使用abstract关键字声明。 	<br/>		<br>\n格式：<br>\nabstract class 类名{ // 抽象类 			<br>\npublic abstract void 方法名() ; //<br>\n抽象方法，只声明而未实现 			<br>\n}</p>\n</blockquote>\n<h4 id=\"there\"  data-line=\"30\"><font color=\"#00000\">不能被实例化</h4>\n<blockquote data-line=\"32\">\n<p>在抽象类的使用中有几个原则： 	· 抽象类本身是不能直接进行实例化操作的，即：不能直接使用关键字new完成。<br/>	·<br>\n一个抽象类必须被子类所继承，被继承的子类（如果不是抽象类）则必须覆写(重写)抽象类中的全部抽象方法。</p>\n</blockquote>\n<h4 id=\"four\"  data-line=\"36\"><font color=\"#00000\">常见问题</h4>\n<h5>&nbsp&nbsp&nbsp&nbsp1、 抽象类能否使用final声明？</h5>\n<blockquote data-line=\"39\">\n<p>不能，因为final属修饰的类是不能有子类的 ， 而抽象类必须有子类才有意义，所以不能。</p>\n</blockquote>\n<h4 id=\"one\"  data-line=\"41\"><font color=\"#00000\">&nbsp&nbsp&nbsp&nbsp2、常见抽象类能否有构造方法？</h4>\n<blockquote data-line=\"43\">\n<p>能有构造方法，而且子类对象实例化的时候的流程与普通类的继承是一样的，都是要先调用父类中的构造方法（默认是无参的），之后再调用子类自己的构造方法。</p>\n</blockquote>\n<h4 id=\"one\"  data-line=\"45\"><font color=\"#00000\">&nbsp&nbsp&nbsp&nbsp3、抽象类和普通类的区别</h4>\n<blockquote data-line=\"47\">\n<p>1、抽象类必须用public或protected修饰(如果为private修饰，那么子类则无法继承，也就无法实现其抽象方法）。 默认缺省为 public<br>\n2、抽象类不可以使用new关键字创建对象， 但是在子类创建对象时， 抽象父类也会被JVM实例化。<br>\n3、如果一个子类继承抽象类，那么必须实现其所有的抽象方法。如果有未实现的抽象方法，那么子类也必须定义为 abstract类</p>\n</blockquote>\n', '<a href=\"#one\"><font color=\"#00000\"><b>代码块<b/></a>\n<a href=\"#two\"><font color=\"#00000\"><b>抽象类<b/></a>\n<a href=\"#there\"><font color=\"#00000\"><b>不能被实例化</b></a>\n<a href=\"#four\"><font color=\"#00000\"><b>常见问题</b></a>\n\n\n<h4 id=\"one\" ><font color=\"#00000\">代码块</h4>\n\n> 普通代码块: 在执行的流程中 出现的 代码块， 我们称其为普通代码块。<br/>\n> 构造代码块 在类中的成员代码块， 我们称其为构造代码块， 在每次对象创建时执行， 执行在构造方法之前。<br/>\n> 静态代码块 在类中使用static修饰的成员代码块， 我们称其为静态代码块， 在类加载时执行。 每次程序启动到关闭 ，只会执行一次的代码块。<br/>\n> 同步代码块 在后续多线程技术中学习。<br/>\n> 面试题： 构造方法 与 构造代码块 以及 静态代码块的执行顺序：<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;静态代码块 --> 构造代码块 --> 构造方法\n\n\n<h4 id=\"two\" ><font color=\"#00000\">抽象类</h4>\n\n> 概念： 	\n> 抽象类必须使用abstract class声明 	一个抽象类中可以没有抽象方法。抽象方法必须写在抽象类或者接口中。 	<br/>	\n> 	格式：\n> 			abstract class 类名\n> { // 抽象类 			\n> } 抽象方法\n> 	只声明而未实现的方法称为抽象方法（未实现指的是：没有“{}”方法体），抽象方法必须使用abstract关键字声明。 	<br/>		\n> 格式：\n> 			abstract class 类名{ // 抽象类 			\n> public abstract void 方法名() ; //\n> 抽象方法，只声明而未实现 			\n> }\n\n<h4 id=\"there\" ><font color=\"#00000\">不能被实例化</h4>\n\n> 在抽象类的使用中有几个原则： 	· 抽象类本身是不能直接进行实例化操作的，即：不能直接使用关键字new完成。<br/>	·\n> 一个抽象类必须被子类所继承，被继承的子类（如果不是抽象类）则必须覆写(重写)抽象类中的全部抽象方法。\n\n\n<h4 id=\"four\" ><font color=\"#00000\">常见问题</h4>\n<h5>&nbsp&nbsp&nbsp&nbsp1、 抽象类能否使用final声明？</h5>\n\n> 不能，因为final属修饰的类是不能有子类的 ， 而抽象类必须有子类才有意义，所以不能。\n\n<h4 id=\"one\" ><font color=\"#00000\">&nbsp&nbsp&nbsp&nbsp2、常见抽象类能否有构造方法？</h4>\n\n> 能有构造方法，而且子类对象实例化的时候的流程与普通类的继承是一样的，都是要先调用父类中的构造方法（默认是无参的），之后再调用子类自己的构造方法。\n\n<h4 id=\"one\" ><font color=\"#00000\">&nbsp&nbsp&nbsp&nbsp3、抽象类和普通类的区别</h4>\n\n> 1、抽象类必须用public或protected修饰(如果为private修饰，那么子类则无法继承，也就无法实现其抽象方法）。 默认缺省为 public\n>  2、抽象类不可以使用new关键字创建对象， 但是在子类创建对象时， 抽象父类也会被JVM实例化。\n> 3、如果一个子类继承抽象类，那么必须实现其所有的抽象方法。如果有未实现的抽象方法，那么子类也必须定义为 abstract类\n');
INSERT INTO `blog_article_content_mapping` VALUES ('36', '数组常用算法创建格式格式1.数据类型[]数组名称=new数据类型[数组长度];格式2.数据类型[]数组名称={数组内容1,数组内容2,数组内容3...数组内容n};格式3.数据类型[]数组名;格式3属于只创建了数组引用名，并未在内存创建数组空间。格式4.数据类型[]数组名称=new数据类型[]{内容1,内容2,内容3...内容n}冒泡排序原理：-比较相邻的元素。如果第一个比第二个大，就交换他们两个。-对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。-针对所有的元素重复以上的步骤，除了最后一个。-持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。名字由来:是因为最小（或最大）的元素会经由交换慢慢“浮”到数列的顶端（降序或升序），就如同水中的气泡最终会上浮到顶端一样，故名“冒泡排序”。升序排列的口诀:：				N个数字来排队				两两相比小靠前,				外层循环length-1				内层循环length-i-1降序排序的口诀:				N个数字来排队				两两相比大靠前,				外层循环length-1				内层循环length-i-1二分查找（折半查找）概述：原理：数组动态扩容二分查找也称折半查找（BinarySearch），它是一种效率较高的查找方法。但是，二分查找要求数组数据必须采用顺序存储结构有序排列。首先，假设数组中元素是按升序排列，将数组中间位置的数据与查找数据比较，如果两者相等，则查找成功；否则利用中间位置记录将数组分成前、后两个子数组，如果中间位置数据大于查找数据，则进一步查找前子数组，否则进一步查找后子数组。重复以上过程，直到找到满足条件的数据，则表示查找成功，直到子数组不存在为止，表示查找不成功', '<h2 data-line=\"0\" id=\"数组常用算法\"><strong>数组常用算法</strong></h2>\n<pre data-line=\"2\"><code class=\"language-\" language=><span class=\"code-block\">创建格式\n格式 <span class=\"hljs-number\">1.</span> 数据类型[] 数组名称 = <span class=\"hljs-keyword\">new</span> 数据类型[数组长度];\n格式 <span class=\"hljs-number\">2.</span> 数据类型[] 数组名称 = {数组内容 <span class=\"hljs-number\">1</span>,数组内容 <span class=\"hljs-number\">2</span>,数组内容 <span class=\"hljs-number\">3.</span>..数组内容 n};\n        格式 <span class=\"hljs-number\">3.</span> 数据类型[] 数组名;\n格式 <span class=\"hljs-number\">3</span> 属于只创建了数组引用名， 并未在内存创建数组空间。\n格式 <span class=\"hljs-number\">4.</span> 数据类型[] 数组名称 = <span class=\"hljs-keyword\">new</span> 数据类型[]{内容 <span class=\"hljs-number\">1</span>,内容 <span class=\"hljs-number\">2</span>,内容 <span class=\"hljs-number\">3.</span>..内容 n}</span></code></pre>\n<p data-line=\"11\"><strong>冒泡排序</strong></p>\n<pre data-line=\"12\"><code class=\"language-\" language=><span class=\"code-block\">原理：\n<span class=\"hljs-deletion\">- 比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span>\n<span class=\"hljs-deletion\">- 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</span>\n<span class=\"hljs-deletion\">- 针对所有的元素重复以上的步骤，除了最后一个。</span>\n<span class=\"hljs-deletion\">- 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span></code></pre>\n<pre data-line=\"21\"><code class=\"language-\" language=><span class=\"code-block\"><span class=\"hljs-section\">名字由来:</span>\n    是因为最小（或最大）的元素会经由交换慢慢“浮”到数列的顶端（降序或升序），就如同水中的气泡最终会上浮到\n顶端一样，故名“冒泡排序”。</span></code></pre>\n<pre data-line=\"27\"><code class=\"language-\" language=><span class=\"code-block\">升序排列的口诀:：\n				N个数字来排队\n				两两相比小靠前,\n				外层 循环<span class=\"hljs-keyword\">length</span>-<span class=\"hljs-number\">1</span>\n				内层循环<span class=\"hljs-keyword\">length</span>-i-<span class=\"hljs-number\">1</span>\n降序排序的口诀:\n				N个数字来排队\n				两两相比大靠前,\n				外层 循环<span class=\"hljs-keyword\">length</span>-<span class=\"hljs-number\">1</span>\n				内层循环<span class=\"hljs-keyword\">length</span>-i-<span class=\"hljs-number\">1</span></span></code></pre>\n<p data-line=\"40\"><strong>二分查找 （折半查找）</strong><br>\n概述：</p>\n<pre data-line=\"42\"><code class=\"language-\" language=><span class=\"code-block\">原理：\n数组动态扩容\n二分查找也称折半查找（<span class=\"hljs-type\">Binary</span> <span class=\"hljs-keyword\">Search</span>），它是一种效率较高的查找方法。但是，二分查找要求数组数据必须采用顺序存储结构有序排列。\n\n首先，假设数组中元素是按升序排列，将数组中间位置的数据与查找数据比较，如果两者相等，则查找成功；否则利用\n中间位置记录将数组分成前、后两个子数组，如果中间位置数据大于查找数据，则进一步查找前子数组，否则进一步查找后子数组。\n重复以上过程，直到找到满足条件的数据，则表示查找成功，\n直到子数组不存在为止，表示查找不成功</span></code></pre>\n', '## **数组常用算法**\n\n```\n创建格式\n格式 1. 数据类型[] 数组名称 = new 数据类型[数组长度];\n格式 2. 数据类型[] 数组名称 = {数组内容 1,数组内容 2,数组内容 3...数组内容 n};\n        格式 3. 数据类型[] 数组名;\n格式 3 属于只创建了数组引用名， 并未在内存创建数组空间。\n格式 4. 数据类型[] 数组名称 = new 数据类型[]{内容 1,内容 2,内容 3...内容 n}\n```\n\n**冒泡排序**\n```\n原理：\n- 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n- 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n- 针对所有的元素重复以上的步骤，除了最后一个。\n- 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n```\n\n```\n名字由来:\n    是因为最小（或最大）的元素会经由交换慢慢“浮”到数列的顶端（降序或升序），就如同水中的气泡最终会上浮到\n顶端一样，故名“冒泡排序”。\n```\n\n```\n升序排列的口诀:：\n				N个数字来排队\n				两两相比小靠前,\n				外层 循环length-1\n				内层循环length-i-1\n降序排序的口诀:\n				N个数字来排队\n				两两相比大靠前,\n				外层 循环length-1\n				内层循环length-i-1\n```\n\n**二分查找 （折半查找）**\n概述：\n```\n原理：\n数组动态扩容\n二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，二分查找要求数组数据必须采用顺序存储结构有序排列。\n\n首先，假设数组中元素是按升序排列，将数组中间位置的数据与查找数据比较，如果两者相等，则查找成功；否则利用\n中间位置记录将数组分成前、后两个子数组，如果中间位置数据大于查找数据，则进一步查找前子数组，否则进一步查找后子数组。\n重复以上过程，直到找到满足条件的数据，则表示查找成功，\n直到子数组不存在为止，表示查找不成功\n```\n');
INSERT INTO `blog_article_content_mapping` VALUES ('37', '解析JSON铭记：访问外界和向外界写入数据都是通过流的的方式解析XML：-SAXReader类生成XML：-XMLWriter类	DocumentHelper类-XStream类解析和生成JSON：-GSon类-JSON类了解XML语法：文档声明：由“<标明名>“开始，以</标明名>结束,标明名可以自定义，可以嵌套，但不能嵌套标明的一半。一个.XML只允许有一个根标明。如：<person></person>正确<person><age></person></age>错误命名规范：1.标明名可以包含英文和数字，其他字符2.标明名不能由XML，Xml，xml，标点符号，数字开头3.标明名中不能由空格和冒号4.标明名要区分大小写-解析XML常用方法：```-SAXReader类：read()		读取为文档		-操作文档的节点：			getRootElement()			获取文档的根节点			elements()					获取节点的子节点集合，数据类型为List<Element>			element(StringNodename)	获取指定节点			getName()					获取节点名			getText()					获取节点内容			elementText(Stringnode)	获取指定节点的内容			setText()					设置节点内容		attributeValue(StringattributeName)			获取节点属性值		addAttribute(StringattributeName,StringattributeValue)	给节点设置属性		addElement(StringNode)			添加节点		-XPATH操作节点：			例如：“//hobby0[@id=hobby]”			语法：			/	：	从根节点开始			//	：	从当前节点开始找查后代节点			.	：	找查当前节点			..	：	找查该节点的父节点			@	：选择属性					使用方式：[@属性名=“值”]方法：注意必须操作的是根节点		selectSingleNode(路径表达式)		找查匹配的单个节点		selectNodes(路径表达式)			找查节点的子节点```-解析XLM的步骤：```一想到解析XML就要用到：SAXReder类1.获取.xml文件输入流FileInputStream类		FileInputStreamflie=newFileStream(xml文件路径)2.实例化解析xml的类：SAXReader类		SAXReaderreader=newSAXReader();3.解析xml				Documentdocument=reader.read(file);4.获取根节点：		Elementelement=document.getRootElement();5.根据节点等方法得到数据；```案例：```-案例一：		publicclassTask1{		/**		*解析XML文件		*		*one.xml文件:		*		*<?xmlversion=1.0encoding=UTF-8?>		*	<preson>		*<name>墨染</name>		*<age>18岁</age>		*<hobby0>				*	<hobby1>羽毛球</hobby1>				*	<hobby2>乒乓球</hobby2>				*	<hobby3>排球</hobby3>				*	<hobby4>篮球</hobby4>				*		</hobby0>				*	</preson>				*		**/			publicstaticvoidmain(String[]args)throwsFileNotFoundException,DocumentException{				FileInputStreamp=newFileInputStream(out\\\\one.xml);//获取XML输入流				SAXReaders=newSAXReader();//实例XML解析工具				Documentd=s.read(p);//读取为文档				Elemente=d.getRootElement();//获得根节点			List<Element>l=e.elements();//获取根节点下的子节点			ListIterator<Element>i=l.listIterator();//获取List集合迭代器			Stringg=null;//记录hobby0			Stringo=null;//记录子节点名			p:while(i.hasNext()){				o=i.next().getName();				if(o.equals(hobby0)){					g=o;					breakp;				}				System.out.println(e.elementText(o));			}			Elementkk=e.element(g);//获取hobby0节点			List<Element>jj=kk.elements();//获取hobby0节点的子节点			for(Elementas:jj){				System.out.println(as.getText());			}			p.close();//关闭流			}		}		-案例二		XPATH			```生成XML的步骤```**一想到要生成XML文件想到的类：XMLWriter类，DocumentHelper类，XStream类**-XMLWriter类，DocumentHelper类		1.获取文件输出：					FileOutputStreamfile=newFileOutputStream(文件路径);				2.文档帮助器类					Elementelement=DocumentHelper.createElement(Stringnode);	//生成根节点				3。添加节点：					Elementelementone=document.addElement(Stringnode);				4.实例化文档转换器类，并将文件转化为XML文件：					XMLWriterwriter=newXMLWriter(file);				5.将生成的XML写入XML文件				wrter.writer(file);.				6.关闭流：					write.close();					-XStream类：1.实例化类：		类名对象=new类名();2.实例化XStream类：			Xstreamxstream=newXstream();3.规定根节点			xstream.alias(根节点,类名.class);4.把对象转换为XML字符串格式			类名对象=xstream.toXML(对象)```案例：```案例一：Elemente=DocumentHelper.createElement(person);		e.addElement(name,幸运佳);		e.addElement(age,18);		Elementwx=e.addElement(hobby);		String[]array={启发,自律,墨染,星辰};		for(inti=0;i<array.length;i++){			wx.addElement(hobby+i,(String)Array.get(array,i));		}		FileOutputStreamf=newFileOutputStream(two.txt);		XMLWriterw=newXMLWriter(f);		w.write(e);		w.close();		案例二：publicclassTask3{	/**	*生成XML字符串，并写入文件	*@paramargs	*@throwsIOException	*@throwsDocumentException	*/	publicstaticvoidmain(String[]args)throwsIOException,DocumentException{				Personp=newPerson(流星,18,墨染);XStreamx=newXStream();//借助XStream类x.alias(person,Person.class);//规定根节点System.out.println(x.toXML(p));FileOutputStreamf=newFileOutputStream(there.txt,false);//必须false，不写时默认false，填true时会发生错误，原因就是XML文件有且仅有一个根节点。PrintStreamp2=newPrintStream(f);//转化为字符流Stringb=x.toXML(p);//把对象转换为XML字符串p2.print(b);p2.close();//关闭流XMLWriterw=newXMLWriter(f);//把文件转换为.xml类型的w.close();//关闭流FileInputStreamfs=newFileInputStream(there.txt);//文件输入流InputStreamReaderin=newInputStreamReader(fs);//转换为字符流SAXReaders=newSAXReader();//XML解析工具类Documentd=s.read(in);//获取文档Elemente=d.getRootElement();//获取根节点System.out.println(e.getName());in.close();//关闭流	}}classPerson{	privateStringname;	privateStringage;	privateStringhobby;	publicPerson(Stringname,Stringage,Stringhobby){		this.name=name;		this.age=age;		this.hobby=hobby;	}	publicStringgetName(){		returnname;	}	publicvoidsetName(Stringname){		this.name=name;	}	publicStringgetAge(){		returnage;	}	publicvoidsetAge(Stringage){		this.age=age;	}	publicStringgetHobby(){		returnhobby;	}	@Override	publicStringtoString(){		returnPerson[name=+name+,age=+age+,hobby=+hobby+];	}}```掌握JSON解析JSON有两个类：GSon类，JSON类JSON语法：{}包住的相当于一个对象{}包住的内容由键值对（键：值）的形式组成，并且同一级键不能有重复（唯一性），且键所对应的值也可是是一个{}（对象）。每个键值对有英文逗号隔开为了安全，在Java中我们要把键用引号引起来。```如：{	age:18,	name：墨染，	“hobby”:{	age:18,	name:星辰	}}```GSon类```**方法**-toJson(对象名)		把对象转换为JSON格式字符串-fromJson(Stringjsonsring,类名.class)			把JSON格式的字符串转换为对象案例：		publicclassTask4{			/**			*Gson			**/			publicstaticvoidmain(String[]args){				Personp=newPerson(墨染,19,星辰);				Gsong=newGson();//Gson类				Strings=g.toJson(p);//把对象转换为json格式				System.out.println(s);							Personpl=g.fromJson(s,Person.class);//json格式转换为Person类			System.out.println(pl.getName());			}		}```JSON类```**方法**-toJSONString（对象名）			把对象转换为JSON格式的字符串-preseObject(Stringjsonstring,类名.class)		把JSON格式的字符串转换为对象-preseArray(Stringjsonstring,类名.class)把JSON格式的字符串转换为List集合类型案例：			publicclassTask5{			/**			*FastJson			**/				publicstaticvoidmain(String[]args){					Personp=newPerson(墨染,18,龙的传人);			Strings=JSON.toJSONString(p);//类JSON把对象转换为JSON字符串			System.out.println(s);						Personk=JSON.parseObject(s,Person.class);//静态类JSON把为JSON字符串转换为对象Person			System.out.println(k.getAge());				}			}```', '<h2 data-line=\"0\" id=\"解析JSON\">解析JSON</h2>\n<pre data-line=\"1\"><code class=\"language-铭记：访问外界和向外界写入数据都是通过流的的方式\" language=铭记：访问外界和向外界写入数据都是通过流的的方式><span class=\"code-block\">铭记：访问外界和向外界写入数据都是通过流的的方式</span></code></pre>\n<p data-line=\"5\"><strong>解析XML：</strong><br>\n- SAXReader类</p>\n<p data-line=\"8\"><strong>生成XML：</strong><br>\n- XMLWriter类  	DocumentHelper类<br>\n- XStream类</p>\n<p data-line=\"12\"><strong>解析和生成JSON：</strong><br>\n- GSon类<br>\n- JSON类</p>\n<p data-line=\"18\"><strong>了解XML</strong></p>\n<ul data-line=\"19\">\n<li>语法：<br>\n文档声明：<?xml version = \"1.0\" encoding = \"UTF-8\" ?><br>\n由“&lt;标明名&gt;“开始，以&lt;/标明名&gt;结束,标明名可以自定义，可以嵌套，但不能嵌套标明的一半。一个.XML只允许有一个根标明。</li>\n</ul>\n<pre data-line=\"22\"><code class=\"language-\" language=><span class=\"code-block\">如：\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">person</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">person</span>&gt;</span>    正确\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">person</span>&gt;</span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">age</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">person</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">age</span>&gt;</span>    错误</span></code></pre>\n<ul data-line=\"27\">\n<li>命名规范：</li>\n</ul>\n<pre data-line=\"28\"><code class=\"language-\" language=><span class=\"code-block\">1.标明名可以包含英文和数字，其他字符\n2.标明名不能由XML，Xml，xml，标点符号，数字开头\n3.标明名中不能由空格和冒号\n4.标明名要区分大小写</span></code></pre>\n<p data-line=\"35\"><strong>- 解析XML常用方法：</strong></p>\n<pre data-line=\"36\"><code class=\"language-dd\" language=dd><span class=\"code-block\">```\n\n- SAXReader类：\n   read()		读取为文档\n   		\n-操作文档的节点：\n			getRootElement()			获取文档的根节点\n			elements()					获取节点的子节点集合，数据类型为List&lt;Element&gt;\n			<span class=\"hljs-title function_\">element</span><span class=\"hljs-params\">(String Nodename)</span>	获取指定节点\n			getName()			   		 获取节点名\n			getText()					获取节点内容\n			elementText(String node)	获取指定节点的内容\n			setText()					设置节点内容\n		   attributeValue(String attributeName)     			获取节点属性值\n		   addAttribute(String attributeName ,String attributeValue)  	 给节点设置属性\n		   addElement(String Node)			添加节点\n		   \n- XPATH操作节点：  \n			例如：“<span class=\"hljs-comment\">//hobby0[@id=&quot;hobby]”</span>\n			语法：\n			/	：	从根节点开始\n			<span class=\"hljs-comment\">//	：	从当前节点开始找查后代节点</span>\n			.	：	找查当前节点\n			..	：	找查该节点的父节点\n			@	：选择属性  \n					使用方式：[@属性名=“值”]\n   方法：注意必须操作的是根节点\n   		selectSingleNode(<span class=\"hljs-string\">&quot;路径表达式&quot;</span>)		找查匹配的单个节点\n   		selectNodes(<span class=\"hljs-string\">&quot;路径表达式&quot;</span>)			找查节点的子节点\n```\n\n- 解析XLM的步骤：\n```\n一想到解析XML就要用到：SAXReder类\n<span class=\"hljs-number\">1.</span>获取.xml文件输入流FileInputStream类\n   		<span class=\"hljs-type\">FileInputStream</span>  <span class=\"hljs-variable\">flie</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileStream</span>(<span class=\"hljs-string\">&quot;xml文件路径&quot;</span>)\n\n<span class=\"hljs-number\">2.</span>实例化解析xml的类：SAXReader 类\n   	 	<span class=\"hljs-type\">SAXReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SAXReader</span>();\n\n<span class=\"hljs-number\">3.</span>解析xml	\n 			<span class=\"hljs-type\">Document</span> <span class=\"hljs-variable\">document</span> <span class=\"hljs-operator\">=</span> reader.read(file);\n\n<span class=\"hljs-number\">4.</span>获取根节点：\n   		<span class=\"hljs-type\">Element</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> document.getRootElement();\n\n<span class=\"hljs-number\">5.</span>根据节点等方法得到数据；\n```</span></code></pre>\n<p data-line=\"86\"><strong>案例：</strong></p>\n<pre data-line=\"88\"><code class=\"language-dd\" language=dd><span class=\"code-block\">```\n - 案例一：\n		<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task1</span> {\n		        <span class=\"hljs-comment\">/**\n		         * 解析XML文件\n		         * \n		         * one.xml文件:\n		         * \n		         * &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n		         * 	&lt;preson&gt;\n		         *      &lt;name&gt;墨染&lt;/name&gt;\n		         *      &lt;age&gt;18岁&lt;/age&gt;\n		         *       &lt;hobby0&gt;\n				 *	       &lt;hobby1&gt;羽毛球&lt;/hobby1&gt;\n				 *	       &lt;hobby2&gt;乒乓球&lt;/hobby2&gt;\n				 *	       &lt;hobby3&gt;排球&lt;/hobby3&gt;\n				 *	       &lt;hobby4&gt;篮球&lt;/hobby4&gt;\n		  		 * 		&lt;/hobby0&gt;\n				 *	&lt;/preson&gt;\n				 *\n		         * */</span>\n			<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> FileNotFoundException, DocumentException {\n				<span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;out\\\\one.xml&quot;</span>);  <span class=\"hljs-comment\">//获取XML输入流</span>\n				<span class=\"hljs-type\">SAXReader</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SAXReader</span>();    <span class=\"hljs-comment\">//实例XML解析工具</span>\n				<span class=\"hljs-type\">Document</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> s.read(p);        <span class=\"hljs-comment\">//读取为文档</span>\n				<span class=\"hljs-type\">Element</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> d.getRootElement();  <span class=\"hljs-comment\">//获得根节点</span>\n			    List&lt;Element&gt; l = e.elements();  <span class=\"hljs-comment\">//获取根节点下的子节点</span>\n			    ListIterator&lt;Element&gt; i = l.listIterator();  <span class=\"hljs-comment\">//获取List集合迭代器</span>\n			    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">g</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;  <span class=\"hljs-comment\">//记录hobby0</span>\n			    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;  <span class=\"hljs-comment\">//记录子节点名</span>\n			   p: <span class=\"hljs-keyword\">while</span>(i.hasNext()) {\n			    	o=i.next().getName();\n			    	<span class=\"hljs-keyword\">if</span>(o.equals(<span class=\"hljs-string\">&quot;hobby0&quot;</span>)) {\n			    		g = o;\n			    		<span class=\"hljs-keyword\">break</span> p;\n			    	}\n			    	System.out.println(e.elementText(o));\n			   }\n			    Element kk= e.element(g);      <span class=\"hljs-comment\">//获取hobby0节点</span>\n			    List&lt;Element&gt; jj= kk.elements();   <span class=\"hljs-comment\">//获取hobby0节点的子节点</span>\n			     <span class=\"hljs-keyword\">for</span>(Element as : jj) {\n			    	 System.out.println(as.getText());\n			     }\n			     p.close();   <span class=\"hljs-comment\">//关闭流</span>\n			}\n		}\n		\n - 案例二		XPATH\n 		\n 	\n```</span></code></pre>\n<p data-line=\"141\"><strong>生成XML的步骤</strong></p>\n<pre data-line=\"142\"><code class=\"language-dd\" language=dd><span class=\"code-block\">```\n**一想到要生成XML文件想到的类：XMLWriter类 ，DocumentHelper类，XStream类**\n\n- XMLWriter类 ，DocumentHelper类\n 		<span class=\"hljs-number\">1.</span>获取文件输出：\n 					<span class=\"hljs-type\">FileOutputStream</span>  <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;文件路径&quot;</span>);\n 		\n 		<span class=\"hljs-number\">2.</span>文档帮助器类\n 					<span class=\"hljs-type\">Element</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> DocumentHelper.createElement(String node);	<span class=\"hljs-comment\">//生成根节点</span>\n 		\n 		<span class=\"hljs-number\">3</span>。添加节点：\n 					<span class=\"hljs-type\">Element</span> <span class=\"hljs-variable\">elementone</span> <span class=\"hljs-operator\">=</span> document.addElement( String node);\n 		\n 		<span class=\"hljs-number\">4.</span>实例化文档转换器类，并将文件转化为XML文件：\n 					<span class=\"hljs-type\">XMLWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLWriter</span>(file);\n 		\n 		<span class=\"hljs-number\">5.</span>将生成的XML写入XML文件\n 		      		 wrter.writer(file);.\n 		     \n 		<span class=\"hljs-number\">6.</span>关闭流：\n 		  			write.close();\n 		  			\n- XStream类：\n<span class=\"hljs-number\">1.</span>实例化类：\n 		 类名  对象 = <span class=\"hljs-keyword\">new</span>  类名();\n<span class=\"hljs-number\">2.</span>实例化XStream类：\n 			<span class=\"hljs-type\">Xstream</span> <span class=\"hljs-variable\">xstream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Xstream</span>();\n<span class=\"hljs-number\">3.</span>规定根节点\n 			 xstream.alias(<span class=\"hljs-string\">&quot;根节点&quot;</span>,类名.class);\n<span class=\"hljs-number\">4.</span>把对象转换为XML字符串格式\n 			类名 对象 = xstream.toXML(对象)\n\n```</span></code></pre>\n<p data-line=\"177\"><strong>案例：</strong></p>\n<pre data-line=\"178\"><code class=\"language-dd\" language=dd><span class=\"code-block\">```\n案例一：\nElement e=DocumentHelper.createElement(<span class=\"hljs-string\">&quot;person&quot;</span>);\n		e.addElement(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;幸运佳&quot;</span>);\n		e.addElement(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;18&quot;</span>);\n		Element wx=e.addElement(<span class=\"hljs-string\">&quot;hobby&quot;</span>);\n		String[] array = {<span class=\"hljs-string\">&quot;启发&quot;</span>,<span class=\"hljs-string\">&quot;自律&quot;</span>,<span class=\"hljs-string\">&quot;墨染&quot;</span>,<span class=\"hljs-string\">&quot;星辰&quot;</span>};\n		<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;array.length;i++) {\n			wx.addElement(<span class=\"hljs-string\">&quot;hobby&quot;</span>+i,(String)Array.get(array, i));\n		}\n		<span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;two.txt&quot;</span>);\n		<span class=\"hljs-type\">XMLWriter</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLWriter</span>(f);\n		w.write(e);\n		w.close();\n		\n案例二：\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task3</span> {\n	<span class=\"hljs-comment\">/**\n	 * 生成XML字符串，并写入文件\n	 * <span class=\"hljs-doctag\">@param</span> args\n	 * <span class=\"hljs-doctag\">@throws</span> IOException\n	 * <span class=\"hljs-doctag\">@throws</span> DocumentException\n	 */</span>\n	<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException, DocumentException {\n		\n		<span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;流星&quot;</span>,<span class=\"hljs-string\">&quot;18&quot;</span>,<span class=\"hljs-string\">&quot;墨染&quot;</span>);\n       <span class=\"hljs-type\">XStream</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XStream</span>();   <span class=\"hljs-comment\">//借助XStream类</span>\n       x.alias(<span class=\"hljs-string\">&quot;person&quot;</span>,Person.class);  <span class=\"hljs-comment\">//规定根节点</span>\n       System.out.println(x.toXML(p));\n       \n       <span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;there.txt&quot;</span>,<span class=\"hljs-literal\">false</span>); \n       <span class=\"hljs-comment\">// 必须false，不写时默认false，填true时会发生错误，原因就是 XML文件有且仅有一个根节点。</span>\n       <span class=\"hljs-type\">PrintStream</span> <span class=\"hljs-variable\">p2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrintStream</span>(f);   <span class=\"hljs-comment\">//转化为字符流</span>\n       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span>x.toXML(p);    <span class=\"hljs-comment\">//把对象转换为XML字符串</span>\n       p2.print(b); \n       p2.close();   <span class=\"hljs-comment\">//关闭流</span>\n       \n       <span class=\"hljs-type\">XMLWriter</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLWriter</span>(f);   <span class=\"hljs-comment\">//把文件转换为.xml类型的</span>\n       w.close();                        <span class=\"hljs-comment\">//关闭流</span>\n       \n       <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fs</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;there.txt&quot;</span>);  <span class=\"hljs-comment\">//文件输入流 </span>\n       <span class=\"hljs-type\">InputStreamReader</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(fs);     <span class=\"hljs-comment\">//转换为字符流</span>\n       <span class=\"hljs-type\">SAXReader</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SAXReader</span>();     <span class=\"hljs-comment\">//XML解析工具类</span>\n       <span class=\"hljs-type\">Document</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> s.read(in);            <span class=\"hljs-comment\">//获取文档    </span>\n       <span class=\"hljs-type\">Element</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> d.getRootElement();     <span class=\"hljs-comment\">//获取根节点</span>\n       \n       System.out.println(e.getName());\n       in.close();                          <span class=\"hljs-comment\">//关闭流</span>\n	}\n\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>{\n	<span class=\"hljs-keyword\">private</span> String name;\n	<span class=\"hljs-keyword\">private</span> String age;\n	<span class=\"hljs-keyword\">private</span> String hobby;\n	<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Person</span><span class=\"hljs-params\">(String name, String age, String hobby)</span> {\n		<span class=\"hljs-built_in\">this</span>.name = name;\n		<span class=\"hljs-built_in\">this</span>.age = age;\n		<span class=\"hljs-built_in\">this</span>.hobby = hobby;\n	}\n	<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> {\n		<span class=\"hljs-keyword\">return</span> name;\n	}\n	<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> {\n		<span class=\"hljs-built_in\">this</span>.name = name;\n	}\n	<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> {\n		<span class=\"hljs-keyword\">return</span> age;\n	}\n	<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(String age)</span> {\n		<span class=\"hljs-built_in\">this</span>.age = age;\n	}\n	<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getHobby</span><span class=\"hljs-params\">()</span> {\n		<span class=\"hljs-keyword\">return</span> hobby;\n	}\n	<span class=\"hljs-meta\">@Override</span>\n	<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + age + <span class=\"hljs-string\">&quot;, hobby=&quot;</span> + hobby + <span class=\"hljs-string\">&quot;]&quot;</span>;\n	}\n}\n```</span></code></pre>\n<p data-line=\"262\"><strong>掌握JSON</strong><br>\n<strong>解析JSON有两个类：GSon类 ， JSON类</strong><br>\nJSON语法：</p>\n<ul data-line=\"265\">\n<li>{}包住的相当于一个对象</li>\n<li>{}包住的内容由键值对（键 ：值）的形式组成，并且同一级键不能有重复（唯一性），且键所对应的值也可是是一个{}（对象）。</li>\n<li>每个键值对有英文逗号隔开</li>\n<li>为了安全，在Java中我们要把键用引号引起来。</li>\n</ul>\n<pre data-line=\"270\"><code class=\"language-dd\" language=dd><span class=\"code-block\">```\n如：\n{\n	<span class=\"hljs-string\">&quot;age&quot;</span>:<span class=\"hljs-string\">&quot;18&quot;</span>,\n	<span class=\"hljs-string\">&quot;name&quot;</span>：<span class=\"hljs-string\">&quot;墨染&quot;</span>，\n	“hobby”:{\n	   <span class=\"hljs-string\">&quot;age&quot;</span>:<span class=\"hljs-string\">&quot;18&quot;</span>,\n	   <span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;星辰&quot;</span>\n	}\n}\n```</span></code></pre>\n<p data-line=\"283\"><strong>GSon类</strong></p>\n<pre data-line=\"284\"><code class=\"language-sd\" language=sd><span class=\"code-block\">```\n**方法**\n\n - toJson(对象名)  		 把对象转换为JSON格式字符串\n - fromJson(String jsonsring, 类名.<span class=\"hljs-keyword\">class</span>)			把JSON格式的字符串转换为对象\n\n案例：\n		<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Task4</span> {\n			<span class=\"hljs-comment\">/**\n			 * Gson\n			 * */</span>\n			<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> {\n				Person p = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;墨染&quot;</span>,<span class=\"hljs-string\">&quot;19&quot;</span>,<span class=\"hljs-string\">&quot;星辰&quot;</span>);  \n				Gson g = <span class=\"hljs-keyword\">new</span> Gson();     <span class=\"hljs-comment\">//Gson类</span>\n				String s = g.toJson(p);    <span class=\"hljs-comment\">//把对象转换为json格式</span>\n				System.<span class=\"hljs-keyword\">out</span>.println(s);   \n				\n			  Person pl = g.fromJson(s, Person.<span class=\"hljs-keyword\">class</span>);   <span class=\"hljs-comment\">// json格式转换为Person类</span>\n			 System.<span class=\"hljs-keyword\">out</span>.println(pl.getName());        \n			}\n		}\n```</span></code></pre>\n<p data-line=\"308\"><strong>JSON类</strong></p>\n<pre data-line=\"309\"><code class=\"language-dd\" language=dd><span class=\"code-block\">```\n**方法**\n\n - toJSONString（对象名） 			 把对象转换为JSON格式的字符串\n - preseObject(String  jsonstring,类名.<span class=\"hljs-keyword\">class</span>)		把JSON格式的字符串转换为对象\n - preseArray(String jsonstring , 类名.<span class=\"hljs-keyword\">class</span>)     把JSON格式的字符串转换为List集合类型\n\n案例：\n			<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Task5</span> {\n			    <span class=\"hljs-comment\">/**\n			     * FastJson\n			     * */</span>\n				<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> {\n					Person p = <span class=\"hljs-keyword\">new</span>  Person(<span class=\"hljs-string\">&quot;墨染&quot;</span>,<span class=\"hljs-string\">&quot;18&quot;</span>,<span class=\"hljs-string\">&quot;龙的传人&quot;</span>);\n			        String s = JSON.toJSONString(p);  <span class=\"hljs-comment\">//类JSON 把对象转换为JSON字符串</span>\n			        System.<span class=\"hljs-keyword\">out</span>.println(s);\n			       \n			        Person k = JSON.parseObject(s,Person.<span class=\"hljs-keyword\">class</span>);   <span class=\"hljs-comment\">//静态类JSON 把为JSON字符串转换为对象Person</span>\n			        System.<span class=\"hljs-keyword\">out</span>.println(k.getAge()); \n				}\n			}\n```</span></code></pre>\n', '## 解析JSON\n ~~~  铭记：访问外界和向外界写入数据都是通过流的的方式\n 铭记：访问外界和向外界写入数据都是通过流的的方式\n ~~~\n\n**解析XML：**\n			 - SAXReader类\n \n**生成XML：**\n			 - XMLWriter类  	DocumentHelper类\n			 - XStream类\n \n  **解析和生成JSON：**\n		 	- GSon类\n			 - JSON类\n\n		\n		\n**了解XML**\n - 语法：\n		文档声明：<?xml version = \"1.0\" encoding = \"UTF-8\" ?>\n       由“<标明名>“开始，以</标明名>结束,标明名可以自定义，可以嵌套，但不能嵌套标明的一半。一个.XML只允许有一个根标明。\n```\n如：\n      <person></person>    正确\n      <person>  <age> </person> </age>    错误\n```\n - 命名规范：\n```\n1.标明名可以包含英文和数字，其他字符\n2.标明名不能由XML，Xml，xml，标点符号，数字开头\n3.标明名中不能由空格和冒号\n4.标明名要区分大小写\n```\n\n **- 解析XML常用方法：**\n ~~~dd\n```\n\n - SAXReader类：\n	read()		读取为文档\n			\n -操作文档的节点：\n 			getRootElement()			获取文档的根节点\n 			elements()					获取节点的子节点集合，数据类型为List<Element>\n 			element(String Nodename)	获取指定节点\n 			getName()			   		 获取节点名\n 			getText()					获取节点内容\n 			elementText(String node)	获取指定节点的内容\n 			setText()					设置节点内容\n 		   attributeValue(String attributeName)     			获取节点属性值\n 		   addAttribute(String attributeName ,String attributeValue)  	 给节点设置属性\n 		   addElement(String Node)			添加节点\n 		   \n - XPATH操作节点：  \n 			例如：“//hobby0[@id=\"hobby]”\n 			语法：\n 			/	：	从根节点开始\n 			//	：	从当前节点开始找查后代节点\n 			.	：	找查当前节点\n 			..	：	找查该节点的父节点\n 			@	：选择属性  \n 					使用方式：[@属性名=“值”]\n	方法：注意必须操作的是根节点\n			selectSingleNode(\"路径表达式\")		找查匹配的单个节点\n			selectNodes(\"路径表达式\")			找查节点的子节点\n```\n\n - 解析XLM的步骤：\n```\n一想到解析XML就要用到：SAXReder类\n1.获取.xml文件输入流FileInputStream类\n			FileInputStream  flie = new FileStream(\"xml文件路径\")\n\n2.实例化解析xml的类：SAXReader 类\n		 	SAXReader reader = new SAXReader();\n\n3.解析xml	\n  			Document document = reader.read(file);\n\n4.获取根节点：\n			Element element = document.getRootElement();\n\n5.根据节点等方法得到数据；\n```\n~~~\n**案例：**\n\n~~~dd\n```\n - 案例一：\n		public class Task1 {\n		        /**\n		         * 解析XML文件\n		         * \n		         * one.xml文件:\n		         * \n		         * <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n		         * 	<preson>\n		         *      <name>墨染</name>\n		         *      <age>18岁</age>\n		         *       <hobby0>\n				 *	       <hobby1>羽毛球</hobby1>\n				 *	       <hobby2>乒乓球</hobby2>\n				 *	       <hobby3>排球</hobby3>\n				 *	       <hobby4>篮球</hobby4>\n		  		 * 		</hobby0>\n				 *	</preson>\n				 *\n		         * */\n			public static void main(String[] args) throws FileNotFoundException, DocumentException {\n				FileInputStream p = new FileInputStream(\"out\\\\one.xml\");  //获取XML输入流\n				SAXReader s = new SAXReader();    //实例XML解析工具\n				Document d = s.read(p);        //读取为文档\n				Element e = d.getRootElement();  //获得根节点\n			    List<Element> l = e.elements();  //获取根节点下的子节点\n			    ListIterator<Element> i = l.listIterator();  //获取List集合迭代器\n			    String g = null;  //记录hobby0\n			    String o = null;  //记录子节点名\n			   p: while(i.hasNext()) {\n			    	o=i.next().getName();\n			    	if(o.equals(\"hobby0\")) {\n			    		g = o;\n			    		break p;\n			    	}\n			    	System.out.println(e.elementText(o));\n			   }\n			    Element kk= e.element(g);      //获取hobby0节点\n			    List<Element> jj= kk.elements();   //获取hobby0节点的子节点\n			     for(Element as : jj) {\n			    	 System.out.println(as.getText());\n			     }\n			     p.close();   //关闭流\n			}\n		}\n		\n - 案例二		XPATH\n 		\n 	\n```\n ~~~\n   **生成XML的步骤** \n   ~~~dd\n```\n**一想到要生成XML文件想到的类：XMLWriter类 ，DocumentHelper类，XStream类**\n\n - XMLWriter类 ，DocumentHelper类\n			1.获取文件输出：\n						FileOutputStream  file = new FileOutputStream(\"文件路径\");\n			\n			2.文档帮助器类\n						Element element = DocumentHelper.createElement(String node);	//生成根节点\n			\n			3。添加节点：\n						Element elementone = document.addElement( String node);\n			\n			4.实例化文档转换器类，并将文件转化为XML文件：\n						XMLWriter writer = new XMLWriter(file);\n			\n			5.将生成的XML写入XML文件\n			      		 wrter.writer(file);.\n			     \n			6.关闭流：\n			  			write.close();\n			  			\n - XStream类：\n 1.实例化类：\n			 类名  对象 = new  类名();\n 2.实例化XStream类：\n 				Xstream xstream = new Xstream();\n 3.规定根节点\n				 xstream.alias(\"根节点\",类名.class);\n 4.把对象转换为XML字符串格式\n				类名 对象 = xstream.toXML(对象)\n\n```\n~~~\n**案例：**\n~~~dd\n```\n案例一：\nElement e=DocumentHelper.createElement(\"person\");\n		e.addElement(\"name\",\"幸运佳\");\n		e.addElement(\"age\", \"18\");\n		Element wx=e.addElement(\"hobby\");\n		String[] array = {\"启发\",\"自律\",\"墨染\",\"星辰\"};\n		for(int i = 0;i<array.length;i++) {\n			wx.addElement(\"hobby\"+i,(String)Array.get(array, i));\n		}\n		FileOutputStream f = new FileOutputStream(\"two.txt\");\n		XMLWriter w = new XMLWriter(f);\n		w.write(e);\n		w.close();\n		\n案例二：\npublic class Task3 {\n	/**\n	 * 生成XML字符串，并写入文件\n	 * @param args\n	 * @throws IOException\n	 * @throws DocumentException\n	 */\n	public static void main(String[] args) throws IOException, DocumentException {\n		\n		Person p = new Person(\"流星\",\"18\",\"墨染\");\n       XStream x = new XStream();   //借助XStream类\n       x.alias(\"person\",Person.class);  //规定根节点\n       System.out.println(x.toXML(p));\n       \n       FileOutputStream f = new FileOutputStream(\"there.txt\",false); \n       // 必须false，不写时默认false，填true时会发生错误，原因就是 XML文件有且仅有一个根节点。\n       PrintStream p2 = new PrintStream(f);   //转化为字符流\n       String b =x.toXML(p);    //把对象转换为XML字符串\n       p2.print(b); \n       p2.close();   //关闭流\n       \n       XMLWriter w = new XMLWriter(f);   //把文件转换为.xml类型的\n       w.close();                        //关闭流\n       \n       FileInputStream fs = new FileInputStream(\"there.txt\");  //文件输入流 \n       InputStreamReader in = new InputStreamReader(fs);     //转换为字符流\n       SAXReader s = new SAXReader();     //XML解析工具类\n       Document d = s.read(in);            //获取文档    \n       Element e = d.getRootElement();     //获取根节点\n       \n       System.out.println(e.getName());\n       in.close();                          //关闭流\n	}\n\n}\n\nclass Person{\n	private String name;\n	private String age;\n	private String hobby;\n	public Person(String name, String age, String hobby) {\n		this.name = name;\n		this.age = age;\n		this.hobby = hobby;\n	}\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n	public String getAge() {\n		return age;\n	}\n	public void setAge(String age) {\n		this.age = age;\n	}\n	public String getHobby() {\n		return hobby;\n	}\n	@Override\n	public String toString() {\n		return \"Person [name=\" + name + \", age=\" + age + \", hobby=\" + hobby + \"]\";\n	}\n}\n```\n~~~\n**掌握JSON**\n**解析JSON有两个类：GSon类 ， JSON类**\nJSON语法：\n - {}包住的相当于一个对象\n - {}包住的内容由键值对（键 ：值）的形式组成，并且同一级键不能有重复（唯一性），且键所对应的值也可是是一个{}（对象）。\n - 每个键值对有英文逗号隔开\n - 为了安全，在Java中我们要把键用引号引起来。\n \n~~~dd\n```\n如：\n{\n	\"age\":\"18\",\n	\"name\"：\"墨染\"，\n	“hobby”:{\n	   \"age\":\"18\",\n	   \"name\":\"星辰\"\n	}\n}\n```\n~~~\n**GSon类**\n~~~sd\n```\n**方法**\n\n - toJson(对象名)  		 把对象转换为JSON格式字符串\n - fromJson(String jsonsring, 类名.class)			把JSON格式的字符串转换为对象\n\n案例：\n		public class Task4 {\n			/**\n			 * Gson\n			 * */\n			public static void main(String[] args) {\n				Person p = new Person(\"墨染\",\"19\",\"星辰\");  \n				Gson g = new Gson();     //Gson类\n				String s = g.toJson(p);    //把对象转换为json格式\n				System.out.println(s);   \n				\n			  Person pl = g.fromJson(s, Person.class);   // json格式转换为Person类\n			 System.out.println(pl.getName());        \n			}\n		}\n```\n~~~\n**JSON类**\n~~~dd\n```\n**方法**\n\n - toJSONString（对象名） 			 把对象转换为JSON格式的字符串\n - preseObject(String  jsonstring,类名.class)		把JSON格式的字符串转换为对象\n - preseArray(String jsonstring , 类名.class)     把JSON格式的字符串转换为List集合类型\n\n案例：\n			public class Task5 {\n			    /**\n			     * FastJson\n			     * */\n				public static void main(String[] args) {\n					Person p = new  Person(\"墨染\",\"18\",\"龙的传人\");\n			        String s = JSON.toJSONString(p);  //类JSON 把对象转换为JSON字符串\n			        System.out.println(s);\n			       \n			        Person k = JSON.parseObject(s,Person.class);   //静态类JSON 把为JSON字符串转换为对象Person\n			        System.out.println(k.getAge()); \n				}\n			}\n```\n\n\n \n   		  \n        \n');
INSERT INTO `blog_article_content_mapping` VALUES ('38', '一、Java集合框架概述数组与集合的区别如下：数组长度不可变化而且无法保存具有映射关系的数据；集合类用于保存数量不确定的数据，以及保存具有映射关系的数据。数组元素既可以是基本类型的值，也可以是对象；集合只能保存对象。Java集合类主要由两个根接口Collection和Map派生出来的，Collection派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此Java集合大致也可分成List、Set、Queue、Map四种接口体系，（注意：Map不是Collection的子接口）。其中List代表了有序可重复集合，可直接根据元素的索引来访问；Set代表无序不可重复集合，只能根据元素本身来访问；Queue是队列集合；Map代表的是存储key-value对的集合，可根据元素的key来访问value。上图中淡绿色背景覆盖的是集合体系中常用的实现类，分别是ArrayList、LinkedList、ArrayQueue、HashSet、TreeSet、HashMap、TreeMap等实现类。　常用集合的分类：Collection接口的接口对象的集合（单列集合）├——-List接口：元素按进入先后有序保存，可重复│—————-LinkedList接口实现类，链表，插入删除，没有同步，线程不安全│—————-ArrayList接口实现类，数组，随机访问，没有同步，线程不安全│—————-Vector接口实现类数组，同步，线程安全│———————-Stack是Vector类的实现类└——-Set接口：仅接收一次，不可重复，并做内部排序├—————-HashSet使用hash表（数组）存储元素│————————LinkedHashSet链表维护元素的插入次序└—————-TreeSet底层实现为二叉树，元素排好序Map接口键值对的集合（双列集合）├———HashTable接口实现类，同步，线程安全├———HashMap接口实现类，没有同步，线程不安全-│—————–LinkedHashMap双向链表和哈希表实现│—————–WeakHashMap├——–TreeMap红黑树对所有的key进行排序└———IdentifyHashMap二、集合要了解得详情Iterator接口和ListIterator接口Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：booleanhasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回true。Objectnext()：返回集合里下一个元素。voidremove()：删除集合里上一次next方法返回的元素。ListIterator接口继承Iterator接口，提供了专门操作List的方法。ListIterator接口在Iterator接口的基础上增加了以下几个方法：booleanhasPrevious()：判断集合里是否存在上一个元素。如果有，该方法返回true。Objectprevious()：返回集合里上一个元素。voidadd(Objecto)：在指定位置插入一个元素。以上两个接口相比较，不难发现，ListIterator增加了向前迭代的功能（Iterator只能向后迭代），ListIterator还可以通过add()方法向List集合中添加元素（Iterator只能删除元素）。TreeMap实现类TreeMap是SortedMap的实现类，是一个红黑树的数据结构，每个key-value对作为红黑树的一个节点。TreeMap存储key-value对时，需要根据key对节点进行排序。TreeMap也有两种排序方式：自然排序：TreeMap的所有key必须实现Comparable接口，而且所有的key应该是同一个类的对象，否则会抛出ClassCastException。定制排序：创建TreeMap时，传入一个Comparator对象，该对象负责对TreeMap中的所有key进行排序。|ArrayList||:---------|--||JDK7以无参数构造方法创建ArrayList时，直接创建了长度是10的Object[]数组elementData。JDK8以无参数构造方法创建ArrayList时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。当ArrayList扩容的时候，首先会设置新的存储能力为原来的1.5倍，如果扩容之后仍小于必要存储要求minCapacity，则取值为minCapacity。若新的存储能力大于MAX_ARRAY_SIZE，则取值为Integer.MAX_VALUE||HashMap||:--|--||如果HashMap的大小超过了负载因子定义的容量，就会进行扩容。默认负载因子为0.75。就是说，当一个map填满了75%的bucket时候，将会创建原来HashMap大小的两倍的bucket数组（jdk1.6，但不超过最大容量），来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。||Collection接口常见方法||--|--||||Map常见方法||--|--|||', '<h2 data-line=\"0\" id=\"一、Java集合框架概述\">一、Java集合框架概述</h2>\n<p data-line=\"1\"><img src=\"https://img-blog.csdnimg.cn/6a8b988ee47843a0a7d4d32630a02864.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src=\"https://img-blog.csdnimg.cn/03f437f18a1c4fcbace3f4150d92c375.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<blockquote data-line=\"4\">\n<p><font color=\"#42b983\"><b> 数组与集合的区别如下：</p>\n</blockquote>\n<p data-line=\"6\"></p>\n<ul data-line=\"8\">\n<li>数组长度不可变化而且无法保存具有映射关系的数据；集合类用于保存数量不确定的数据，以及保存具有映射关系的数据。</li>\n<li>数组元素既可以是基本类型的值，也可以是对象；集合只能保存对象。</li>\n</ul>\n<p data-line=\"11\">Java集合类主要由两个根接口<font color=\"#42b983\"><b>Collection和Map派生出来的</b></font>，Collection派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此Java集合大致也可分成List、Set、Queue、Map四种接口体系，（注意：Map不是Collection的子接口）。</p>\n<p data-line=\"13\"></p>\n<blockquote data-line=\"15\">\n<p>其中List代表了有序可重复集合，可直接根据元素的索引来访问；Set代表无序不可重复集合，只能根据元素本身来访问；Queue是队列集合；Map代表的是存储key-value对的集合，可根据元素的key来访问value。</p>\n</blockquote>\n<p data-line=\"17\">上图中淡绿色背景覆盖的是集合体系中常用的实现类，分别是<font color=\"#42b983\"><b>ArrayList、LinkedList、ArrayQueue、HashSet、TreeSet、HashMap、TreeMap</b></font>等实现类。<br>\n　<br>\n</br></p>\n<blockquote data-line=\"20\">\n<p><font color=\"#42b983\"><b>常用集合的分类：</p>\n</blockquote>\n<p data-line=\"22\">Collection 接口的接口 对象的集合（单列集合）<br>\n├——- <code>List 接口</code>：元素按进入先后有序保存，可重复<br>\n│—————-<code> LinkedList接口实现类</code>， 链表， 插入删除， 没有同步， 线程不安全<br>\n│—————-<code>ArrayList 接口实现类</code>， 数组， 随机访问， 没有同步， 线程不安全<br>\n│—————- <code>Vector接口实现类 数组</code>， 同步， 线程安全<br>\n│ ———————-<code> Stack</code> 是Vector类的实现类<br>\n└——-<code>Set 接口</code>： 仅接收一次，不可重复，并做内部排序<br>\n├—————-<code>HashSet </code>使用hash表（数组）存储元素<br>\n│———————— <code>LinkedHashSet</code> 链表维护元素的插入次序<br>\n└ —————-<code>TreeSet </code>底层实现为二叉树，元素排好序</p>\n<p data-line=\"33\">Map 接口 键值对的集合 （双列集合）<br>\n├———<code>HashTable 接口实现类</code>， 同步， 线程安全<br>\n├———<code>HashMap 接口实现类</code> ，没有同步， 线程不安全-<br>\n│—————–<code>LinkedHashMap </code>双向链表和哈希表实现<br>\n│—————–<code>WeakHashMap</code><br>\n├ ——–<code>TreeMap </code>红黑树对所有的key进行排序<br>\n└———<code>IdentifyHashMap</code></p>\n<br data-line=\"41\">\n<h2 data-line=\"43\" id=\"二、集合要了解得详情\">二、集合要了解得详情</h2>\n<blockquote data-line=\"45\">\n<p><font color=\"#42b983\"><strong>Iterator接口和ListIterator接口</p>\n</blockquote>\n<p data-line=\"48\"><strong>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：</strong></p>\n<ul data-line=\"51\">\n<li>boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。</li>\n<li>Object next()：返回集合里下一个元素。</li>\n<li>void remove()：删除集合里上一次next方法返回的元素。</li>\n</ul>\n<p data-line=\"56\"><strong>ListIterator接口继承Iterator接口，提供了专门操作List的方法。ListIterator接口在Iterator接口的基础上增加了以下几个方法：</strong></p>\n<ul data-line=\"58\">\n<li>boolean hasPrevious()：判断集合里是否存在上一个元素。如果有，该方法返回 true。</li>\n<li>Object previous()：返回集合里上一个元素。</li>\n<li>void add(Object o)：在指定位置插入一个元素。</li>\n</ul>\n<p data-line=\"62\">以上两个接口相比较，不难发现，ListIterator增加了向前迭代的功能（Iterator只能向后迭代），ListIterator还可以通过add()方法向List集合中添加元素（Iterator只能删除元素）。</p>\n<blockquote data-line=\"65\">\n<p><font color=\"#42b983\"><strong>TreeMap实现类</p>\n</blockquote>\n<p data-line=\"67\">TreeMap是SortedMap的实现类，是一个红黑树的数据结构，每个key-value对作为红黑树的一个节点。TreeMap存储key-value对时，需要根据key对节点进行排序。TreeMap也有两种排序方式：</p>\n<ul data-line=\"69\">\n<li><font color=\"#42b983\"><b> 自然排序</b></font>：TreeMap的所有key必须实现<font color=\"#42b983\"><b> Comparable</b></font>接口，而且所有的key应该是同一个类的对象，否则会抛出ClassCastException。</li>\n<li><font color=\"#42b983\"><b>定制排序</b></font>：创建TreeMap时，传入一个<font color=\"#42b983\"><b> Comparator</b></font>对象，该对象负责对TreeMap中的所有key进行排序。</li>\n</ul>\n<p data-line=\"72\">|<center> ArrayList |<br>\n|:---------|--|<br>\n|  JDK 7 以无参数构造方法创建 ArrayList 时，直接创建了长度是10的Object[]数组elementData 。 JDK 8 以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。当ArrayList扩容的时候，首先会设置新的存储能力为原来的1.5倍，如果扩容之后仍小于必要存储要求minCapacity，则取值为minCapacity。若新的存储能力大于MAX_ARRAY_SIZE，则取值为Integer.MAX_VALUE  |</p>\n<p data-line=\"76\">|  <center>HashMap|<br>\n|:--|--|<br>\n| 如果HashMap的大小超过了负载因子定义的容量，就会进行扩容。默认负载因子为0.75。就是说，当一个map填满了75%的bucket时候，将会创建原来HashMap大小的两倍的bucket数组（jdk1.6，但不超过最大容量），来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。 |</p>\n<p data-line=\"81\">| Collection接口常见方法 |<br>\n|--|--|<br>\n| <img src=\"https://img-blog.csdnimg.cn/0f7d02e5ca864920a041594674ea11a2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n|</p>\n<p data-line=\"86\">| Map常见方法 |<br>\n|--|--|<br>\n| <img src=\"https://img-blog.csdnimg.cn/f88a15db859e43fb94c176df3772820e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n|</p>\n', '## 一、Java集合框架概述\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6a8b988ee47843a0a7d4d32630a02864.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/03f437f18a1c4fcbace3f4150d92c375.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n><font color=\"#42b983\"><b> 数组与集合的区别如下：\n\n　\n\n - 数组长度不可变化而且无法保存具有映射关系的数据；集合类用于保存数量不确定的数据，以及保存具有映射关系的数据。\n - 数组元素既可以是基本类型的值，也可以是对象；集合只能保存对象。\n \nJava集合类主要由两个根接口<font color=\"#42b983\"><b>Collection和Map派生出来的</b></font>，Collection派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此Java集合大致也可分成List、Set、Queue、Map四种接口体系，（注意：Map不是Collection的子接口）。\n\n　\n\n> 　其中List代表了有序可重复集合，可直接根据元素的索引来访问；Set代表无序不可重复集合，只能根据元素本身来访问；Queue是队列集合；Map代表的是存储key-value对的集合，可根据元素的key来访问value。\n\n　上图中淡绿色背景覆盖的是集合体系中常用的实现类，分别是<font color=\"#42b983\"><b>ArrayList、LinkedList、ArrayQueue、HashSet、TreeSet、HashMap、TreeMap</b></font>等实现类。\n　\n</br>\n> <font color=\"#42b983\"><b>常用集合的分类：\n\nCollection 接口的接口 对象的集合（单列集合）\n├——- <code>List 接口</code>：元素按进入先后有序保存，可重复\n│—————-<code> LinkedList接口实现类</code>， 链表， 插入删除， 没有同步， 线程不安全\n│—————-<code>ArrayList 接口实现类</code>， 数组， 随机访问， 没有同步， 线程不安全\n│—————- <code>Vector接口实现类 数组</code>， 同步， 线程安全\n│ ———————-<code> Stack</code> 是Vector类的实现类\n└——-<code>Set 接口</code>： 仅接收一次，不可重复，并做内部排序\n├—————-<code>HashSet </code>使用hash表（数组）存储元素\n│———————— <code>LinkedHashSet</code> 链表维护元素的插入次序\n└ —————-<code>TreeSet </code>底层实现为二叉树，元素排好序\n\nMap 接口 键值对的集合 （双列集合）\n├———<code>HashTable 接口实现类</code>， 同步， 线程安全\n├———<code>HashMap 接口实现类</code> ，没有同步， 线程不安全-\n│—————–<code>LinkedHashMap </code>双向链表和哈希表实现\n│—————–<code>WeakHashMap</code>\n├ ——–<code>TreeMap </code>红黑树对所有的key进行排序\n└———<code>IdentifyHashMap</code>\n\n<br>\n\n## 二、集合要了解得详情\n\n>  <font color=\"#42b983\"><strong>Iterator接口和ListIterator接口\n\n\n<strong>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：</strong>\n\n\n - boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。\n - Object next()：返回集合里下一个元素。\n - void remove()：删除集合里上一次next方法返回的元素。\n \n\n　　<strong>ListIterator接口继承Iterator接口，提供了专门操作List的方法。ListIterator接口在Iterator接口的基础上增加了以下几个方法：</strong>\n\n - boolean hasPrevious()：判断集合里是否存在上一个元素。如果有，该方法返回 true。\n - Object previous()：返回集合里上一个元素。\n - void add(Object o)：在指定位置插入一个元素。\n\n　　以上两个接口相比较，不难发现，ListIterator增加了向前迭代的功能（Iterator只能向后迭代），ListIterator还可以通过add()方法向List集合中添加元素（Iterator只能删除元素）。\n　　\n\n> <font color=\"#42b983\"><strong>TreeMap实现类\n\n　　TreeMap是SortedMap的实现类，是一个红黑树的数据结构，每个key-value对作为红黑树的一个节点。TreeMap存储key-value对时，需要根据key对节点进行排序。TreeMap也有两种排序方式：\n\n - <font color=\"#42b983\"><b> 自然排序</b></font>：TreeMap的所有key必须实现<font color=\"#42b983\"><b> Comparable</b></font>接口，而且所有的key应该是同一个类的对象，否则会抛出ClassCastException。\n - <font color=\"#42b983\"><b>定制排序</b></font>：创建TreeMap时，传入一个<font color=\"#42b983\"><b> Comparator</b></font>对象，该对象负责对TreeMap中的所有key进行排序。\n\n|<center> ArrayList |\n|:---------|--|\n|  JDK 7 以无参数构造方法创建 ArrayList 时，直接创建了长度是10的Object[]数组elementData 。 JDK 8 以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。当ArrayList扩容的时候，首先会设置新的存储能力为原来的1.5倍，如果扩容之后仍小于必要存储要求minCapacity，则取值为minCapacity。若新的存储能力大于MAX_ARRAY_SIZE，则取值为Integer.MAX_VALUE  | \n\n|  <center>HashMap| \n|:--|--|\n| 如果HashMap的大小超过了负载因子定义的容量，就会进行扩容。默认负载因子为0.75。就是说，当一个map填满了75%的bucket时候，将会创建原来HashMap大小的两倍的bucket数组（jdk1.6，但不超过最大容量），来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。 | \n\n\n| Collection接口常见方法 | \n|--|--|\n| ![在这里插入图片描述](https://img-blog.csdnimg.cn/0f7d02e5ca864920a041594674ea11a2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n | \n\n| Map常见方法 |\n|--|--|\n| ![在这里插入图片描述](https://img-blog.csdnimg.cn/f88a15db859e43fb94c176df3772820e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57mB5pif56ev,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n |\n\n');
INSERT INTO `blog_article_content_mapping` VALUES ('39', 'yes', '<p data-line=\"0\">yes</p>\n', 'yes');

-- ----------------------------
-- Table structure for `blog_article_push`
-- ----------------------------
DROP TABLE IF EXISTS `blog_article_push`;
CREATE TABLE `blog_article_push` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `article_id` bigint NOT NULL COMMENT '文章id',
  `accept_user_id` bigint NOT NULL COMMENT '接收用户id',
  `reade_status` bit(1) DEFAULT b'0' COMMENT '0:未读，1:已读',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  `send_user_id` bigint NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='文章推送';

-- ----------------------------
-- Records of blog_article_push
-- ----------------------------
INSERT INTO `blog_article_push` VALUES ('30', '27', '1', '', '2023-10-14 18:39:59', '2023-10-14 18:39:59', '', '3');
INSERT INTO `blog_article_push` VALUES ('31', '28', '1', '', '2023-10-14 18:42:02', '2023-10-14 18:42:02', '', '3');
INSERT INTO `blog_article_push` VALUES ('32', '29', '1', '', '2023-10-14 19:13:25', '2023-10-14 19:13:25', '', '3');
INSERT INTO `blog_article_push` VALUES ('33', '30', '1', '', '2023-10-14 19:14:27', '2023-10-14 19:14:27', '', '3');
INSERT INTO `blog_article_push` VALUES ('34', '31', '1', '', '2023-10-14 19:15:43', '2023-10-14 19:15:43', '', '3');
INSERT INTO `blog_article_push` VALUES ('35', '32', '1', '', '2023-10-14 19:18:18', '2023-10-14 19:18:18', '', '3');
INSERT INTO `blog_article_push` VALUES ('36', '33', '2', '', '2023-11-14 19:56:26', '2023-11-14 19:56:26', '', '1');
INSERT INTO `blog_article_push` VALUES ('37', '33', '3', '', '2023-11-14 19:56:26', '2023-11-14 19:56:26', '', '1');

-- ----------------------------
-- Table structure for `blog_attention`
-- ----------------------------
DROP TABLE IF EXISTS `blog_attention`;
CREATE TABLE `blog_attention` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户id',
  `attention_user_id` bigint NOT NULL COMMENT '关注的用户id',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  `stated` bit(1) DEFAULT b'0',
  `active` bit(1) DEFAULT b'0' COMMENT '0:在推送列表里，1：不在',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='关注';

-- ----------------------------
-- Records of blog_attention
-- ----------------------------
INSERT INTO `blog_attention` VALUES ('3', '2', '1', '2023-10-06 13:43:16', '2023-10-06 13:43:16', '', '', '');
INSERT INTO `blog_attention` VALUES ('4', '3', '1', '2023-10-06 14:26:08', '2023-10-06 14:26:08', '', '', '');
INSERT INTO `blog_attention` VALUES ('5', '3', '2', '2023-10-06 15:39:43', '2023-10-06 15:39:43', '', '', '');
INSERT INTO `blog_attention` VALUES ('6', '1', '3', '2023-10-08 19:32:32', '2023-10-08 19:32:32', '', '', '');

-- ----------------------------
-- Table structure for `blog_chatting_records`
-- ----------------------------
DROP TABLE IF EXISTS `blog_chatting_records`;
CREATE TABLE `blog_chatting_records` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `sender_user_id` bigint NOT NULL COMMENT '发送方用户id',
  `acceptor_user_id` bigint NOT NULL COMMENT '接收方用户id',
  `chatting_records_content_mapping_id` bigint NOT NULL COMMENT '聊天内容id',
  `reade_status` bit(1) DEFAULT b'0' COMMENT '0:未读，1:已读',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  `active` bit(1) DEFAULT b'0' COMMENT '0:在推送列表里，1：不在',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=199 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='聊天记录';

-- ----------------------------
-- Records of blog_chatting_records
-- ----------------------------
INSERT INTO `blog_chatting_records` VALUES ('102', '3', '1', '104', '', '2023-10-08 20:45:28', '2023-10-08 20:45:28', '', '');
INSERT INTO `blog_chatting_records` VALUES ('103', '3', '1', '105', '', '2023-10-08 20:45:31', '2023-10-08 20:45:31', '', '');
INSERT INTO `blog_chatting_records` VALUES ('104', '3', '1', '106', '', '2023-10-08 20:45:34', '2023-10-08 20:45:34', '', '');
INSERT INTO `blog_chatting_records` VALUES ('105', '1', '3', '107', '', '2023-10-08 20:46:55', '2023-10-08 20:46:55', '', '');
INSERT INTO `blog_chatting_records` VALUES ('106', '1', '3', '108', '', '2023-10-08 20:46:59', '2023-10-08 20:46:59', '', '');
INSERT INTO `blog_chatting_records` VALUES ('107', '1', '3', '109', '', '2023-10-08 20:47:03', '2023-10-08 20:47:03', '', '');
INSERT INTO `blog_chatting_records` VALUES ('108', '1', '3', '110', '', '2023-10-08 22:46:29', '2023-10-08 22:46:29', '', '');
INSERT INTO `blog_chatting_records` VALUES ('109', '1', '3', '111', '', '2023-10-08 22:46:51', '2023-10-08 22:46:51', '', '');
INSERT INTO `blog_chatting_records` VALUES ('110', '3', '1', '112', '', '2023-10-08 22:47:13', '2023-10-08 22:47:13', '', '');
INSERT INTO `blog_chatting_records` VALUES ('111', '3', '1', '113', '', '2023-10-08 22:49:31', '2023-10-08 22:49:31', '', '');
INSERT INTO `blog_chatting_records` VALUES ('112', '3', '1', '114', '', '2023-10-08 22:49:50', '2023-10-08 22:49:50', '', '');
INSERT INTO `blog_chatting_records` VALUES ('113', '3', '1', '115', '', '2023-10-08 22:51:28', '2023-10-08 22:51:28', '', '');
INSERT INTO `blog_chatting_records` VALUES ('114', '3', '1', '116', '', '2023-10-08 22:51:33', '2023-10-08 22:51:33', '', '');
INSERT INTO `blog_chatting_records` VALUES ('115', '1', '3', '117', '', '2023-10-08 22:52:13', '2023-10-08 22:52:13', '', '');
INSERT INTO `blog_chatting_records` VALUES ('116', '1', '3', '118', '', '2023-10-08 22:52:59', '2023-10-08 22:52:59', '', '');
INSERT INTO `blog_chatting_records` VALUES ('117', '3', '1', '119', '', '2023-10-08 22:53:04', '2023-10-08 22:53:04', '', '');
INSERT INTO `blog_chatting_records` VALUES ('118', '1', '3', '120', '', '2023-10-08 22:53:12', '2023-10-08 22:53:12', '', '');
INSERT INTO `blog_chatting_records` VALUES ('119', '3', '1', '121', '', '2023-10-08 22:53:16', '2023-10-08 22:53:16', '', '');
INSERT INTO `blog_chatting_records` VALUES ('120', '1', '3', '122', '', '2023-10-08 22:54:19', '2023-10-08 22:54:19', '', '');
INSERT INTO `blog_chatting_records` VALUES ('121', '3', '1', '123', '', '2023-10-08 22:55:02', '2023-10-08 22:55:02', '', '');
INSERT INTO `blog_chatting_records` VALUES ('122', '3', '1', '124', '', '2023-10-08 22:55:43', '2023-10-08 22:55:43', '', '');
INSERT INTO `blog_chatting_records` VALUES ('123', '1', '3', '125', '', '2023-10-08 22:55:58', '2023-10-08 22:55:58', '', '');
INSERT INTO `blog_chatting_records` VALUES ('124', '3', '1', '126', '', '2023-10-08 22:58:30', '2023-10-08 22:58:30', '', '');
INSERT INTO `blog_chatting_records` VALUES ('125', '1', '3', '127', '', '2023-10-08 22:58:53', '2023-10-08 22:58:53', '', '');
INSERT INTO `blog_chatting_records` VALUES ('126', '1', '3', '128', '', '2023-10-08 22:59:10', '2023-10-08 22:59:10', '', '');
INSERT INTO `blog_chatting_records` VALUES ('127', '3', '1', '129', '', '2023-10-08 22:59:38', '2023-10-08 22:59:38', '', '');
INSERT INTO `blog_chatting_records` VALUES ('128', '1', '3', '130', '', '2023-10-08 22:59:51', '2023-10-08 22:59:51', '', '');
INSERT INTO `blog_chatting_records` VALUES ('129', '3', '1', '131', '', '2023-10-08 23:00:57', '2023-10-08 23:00:57', '', '');
INSERT INTO `blog_chatting_records` VALUES ('130', '3', '1', '132', '', '2023-10-08 23:01:18', '2023-10-08 23:01:18', '', '');
INSERT INTO `blog_chatting_records` VALUES ('131', '3', '1', '133', '', '2023-10-08 23:11:40', '2023-10-08 23:11:40', '', '');
INSERT INTO `blog_chatting_records` VALUES ('132', '1', '3', '134', '', '2023-10-08 23:16:23', '2023-10-08 23:16:23', '', '');
INSERT INTO `blog_chatting_records` VALUES ('133', '3', '1', '135', '', '2023-10-08 23:16:32', '2023-10-08 23:16:32', '', '');
INSERT INTO `blog_chatting_records` VALUES ('134', '3', '1', '136', '', '2023-10-08 23:19:31', '2023-10-08 23:19:31', '', '');
INSERT INTO `blog_chatting_records` VALUES ('135', '1', '3', '137', '', '2023-10-08 23:20:37', '2023-10-08 23:20:37', '', '');
INSERT INTO `blog_chatting_records` VALUES ('136', '3', '1', '138', '', '2023-10-08 23:23:17', '2023-10-08 23:23:17', '', '');
INSERT INTO `blog_chatting_records` VALUES ('137', '3', '1', '139', '', '2023-10-08 23:26:21', '2023-10-08 23:26:21', '', '');
INSERT INTO `blog_chatting_records` VALUES ('138', '1', '3', '140', '', '2023-10-08 23:26:33', '2023-10-08 23:26:33', '', '');
INSERT INTO `blog_chatting_records` VALUES ('139', '1', '3', '141', '', '2023-10-08 23:28:19', '2023-10-08 23:28:19', '', '');
INSERT INTO `blog_chatting_records` VALUES ('140', '1', '3', '142', '', '2023-10-08 23:28:23', '2023-10-08 23:28:23', '', '');
INSERT INTO `blog_chatting_records` VALUES ('141', '3', '1', '143', '', '2023-10-08 23:28:47', '2023-10-08 23:28:47', '', '');
INSERT INTO `blog_chatting_records` VALUES ('142', '3', '1', '144', '', '2023-10-08 23:29:48', '2023-10-08 23:29:48', '', '');
INSERT INTO `blog_chatting_records` VALUES ('143', '3', '1', '145', '', '2023-10-08 23:31:16', '2023-10-08 23:31:16', '', '');
INSERT INTO `blog_chatting_records` VALUES ('144', '3', '1', '146', '', '2023-10-08 23:31:44', '2023-10-08 23:31:44', '', '');
INSERT INTO `blog_chatting_records` VALUES ('145', '1', '3', '147', '', '2023-10-08 23:32:02', '2023-10-08 23:32:02', '', '');
INSERT INTO `blog_chatting_records` VALUES ('146', '3', '1', '148', '', '2023-10-08 23:34:53', '2023-10-08 23:34:53', '', '');
INSERT INTO `blog_chatting_records` VALUES ('147', '1', '3', '149', '', '2023-10-08 23:35:12', '2023-10-08 23:35:12', '', '');
INSERT INTO `blog_chatting_records` VALUES ('148', '1', '3', '150', '', '2023-10-08 23:35:19', '2023-10-08 23:35:19', '', '');
INSERT INTO `blog_chatting_records` VALUES ('149', '1', '3', '151', '', '2023-10-08 23:35:34', '2023-10-08 23:35:34', '', '');
INSERT INTO `blog_chatting_records` VALUES ('150', '1', '3', '152', '', '2023-10-08 23:35:42', '2023-10-08 23:35:42', '', '');
INSERT INTO `blog_chatting_records` VALUES ('151', '1', '3', '153', '', '2023-10-08 23:35:45', '2023-10-08 23:35:45', '', '');
INSERT INTO `blog_chatting_records` VALUES ('152', '3', '1', '154', '', '2023-10-09 10:47:40', '2023-10-09 10:47:40', '', '');
INSERT INTO `blog_chatting_records` VALUES ('153', '1', '3', '155', '', '2023-10-09 11:07:51', '2023-10-09 11:07:51', '', '');
INSERT INTO `blog_chatting_records` VALUES ('154', '1', '3', '156', '', '2023-10-09 11:08:47', '2023-10-09 11:08:47', '', '');
INSERT INTO `blog_chatting_records` VALUES ('155', '1', '3', '157', '', '2023-10-09 11:09:14', '2023-10-09 11:09:14', '', '');
INSERT INTO `blog_chatting_records` VALUES ('156', '1', '3', '158', '', '2023-10-09 11:14:59', '2023-10-09 11:14:59', '', '');
INSERT INTO `blog_chatting_records` VALUES ('157', '1', '3', '159', '', '2023-10-09 11:15:37', '2023-10-09 11:15:37', '', '');
INSERT INTO `blog_chatting_records` VALUES ('158', '1', '3', '160', '', '2023-10-09 11:15:51', '2023-10-09 11:15:51', '', '');
INSERT INTO `blog_chatting_records` VALUES ('159', '3', '1', '161', '', '2023-10-09 12:26:07', '2023-10-09 12:26:07', '', '');
INSERT INTO `blog_chatting_records` VALUES ('160', '1', '3', '162', '', '2023-10-09 12:26:40', '2023-10-09 12:26:40', '', '');
INSERT INTO `blog_chatting_records` VALUES ('161', '3', '1', '163', '', '2023-10-09 12:26:48', '2023-10-09 12:26:48', '', '');
INSERT INTO `blog_chatting_records` VALUES ('162', '1', '3', '164', '', '2023-10-12 18:39:36', '2023-10-12 18:39:36', '', '');
INSERT INTO `blog_chatting_records` VALUES ('163', '1', '3', '165', '', '2023-10-15 18:23:53', '2023-10-15 18:23:53', '', '');
INSERT INTO `blog_chatting_records` VALUES ('164', '3', '1', '166', '', '2023-10-15 18:25:28', '2023-10-15 18:25:28', '', '');
INSERT INTO `blog_chatting_records` VALUES ('165', '1', '3', '167', '', '2023-10-15 18:26:20', '2023-10-15 18:26:20', '', '');
INSERT INTO `blog_chatting_records` VALUES ('166', '1', '3', '168', '', '2023-10-15 19:06:05', '2023-10-15 19:06:05', '', '');
INSERT INTO `blog_chatting_records` VALUES ('167', '3', '1', '169', '', '2023-10-15 19:51:03', '2023-10-15 19:51:03', '', '');
INSERT INTO `blog_chatting_records` VALUES ('168', '3', '1', '170', '', '2023-10-15 20:00:58', '2023-10-15 20:00:58', '', '');
INSERT INTO `blog_chatting_records` VALUES ('169', '1', '3', '171', '', '2023-10-15 20:01:45', '2023-10-15 20:01:45', '', '');
INSERT INTO `blog_chatting_records` VALUES ('170', '3', '1', '172', '', '2023-10-15 20:02:26', '2023-10-15 20:02:26', '', '');
INSERT INTO `blog_chatting_records` VALUES ('171', '1', '3', '173', '', '2023-10-15 20:12:39', '2023-10-15 20:12:39', '', '');
INSERT INTO `blog_chatting_records` VALUES ('172', '3', '1', '174', '', '2023-10-15 20:18:45', '2023-10-15 20:18:45', '', '');
INSERT INTO `blog_chatting_records` VALUES ('173', '1', '3', '175', '', '2023-10-15 20:22:07', '2023-10-15 20:22:07', '', '');
INSERT INTO `blog_chatting_records` VALUES ('174', '3', '1', '176', '', '2023-10-15 20:39:42', '2023-10-15 20:39:42', '', '');
INSERT INTO `blog_chatting_records` VALUES ('175', '1', '3', '177', '', '2023-10-15 20:41:53', '2023-10-15 20:41:53', '', '');
INSERT INTO `blog_chatting_records` VALUES ('176', '1', '3', '178', '', '2023-10-15 20:43:52', '2023-10-15 20:43:52', '', '');
INSERT INTO `blog_chatting_records` VALUES ('177', '3', '1', '179', '', '2023-10-15 20:51:27', '2023-10-15 20:51:27', '', '');
INSERT INTO `blog_chatting_records` VALUES ('178', '3', '1', '180', '', '2023-10-15 21:02:06', '2023-10-15 21:02:06', '', '');
INSERT INTO `blog_chatting_records` VALUES ('179', '1', '3', '181', '', '2023-10-15 21:02:41', '2023-10-15 21:02:41', '', '');
INSERT INTO `blog_chatting_records` VALUES ('180', '1', '3', '182', '', '2023-10-15 21:08:11', '2023-10-15 21:08:11', '', '');
INSERT INTO `blog_chatting_records` VALUES ('181', '1', '3', '183', '', '2023-10-15 21:09:33', '2023-10-15 21:09:33', '', '');
INSERT INTO `blog_chatting_records` VALUES ('182', '1', '3', '184', '', '2023-10-15 21:10:23', '2023-10-15 21:10:23', '', '');
INSERT INTO `blog_chatting_records` VALUES ('183', '1', '3', '185', '', '2023-10-15 21:11:12', '2023-10-15 21:11:12', '', '');
INSERT INTO `blog_chatting_records` VALUES ('184', '1', '3', '186', '', '2023-10-15 21:15:36', '2023-10-15 21:15:36', '', '');
INSERT INTO `blog_chatting_records` VALUES ('185', '1', '3', '187', '', '2023-10-15 21:16:07', '2023-10-15 21:16:07', '', '');
INSERT INTO `blog_chatting_records` VALUES ('186', '1', '3', '188', '', '2023-10-15 21:16:58', '2023-10-15 21:16:58', '', '');
INSERT INTO `blog_chatting_records` VALUES ('187', '1', '3', '189', '', '2023-10-15 21:25:28', '2023-10-15 21:25:28', '', '');
INSERT INTO `blog_chatting_records` VALUES ('188', '3', '1', '190', '', '2023-10-19 19:34:05', '2023-10-19 19:34:05', '', '');
INSERT INTO `blog_chatting_records` VALUES ('189', '1', '3', '191', '', '2023-10-19 19:39:26', '2023-10-19 19:39:26', '', '');
INSERT INTO `blog_chatting_records` VALUES ('190', '3', '1', '192', '', '2023-10-19 19:40:25', '2023-10-19 19:40:25', '', '');
INSERT INTO `blog_chatting_records` VALUES ('191', '1', '3', '193', '', '2023-10-19 19:51:12', '2023-10-19 19:51:12', '', '');
INSERT INTO `blog_chatting_records` VALUES ('192', '3', '1', '194', '', '2023-10-19 19:51:37', '2023-10-19 19:51:37', '', '');
INSERT INTO `blog_chatting_records` VALUES ('193', '1', '3', '195', '', '2023-10-19 19:52:38', '2023-10-19 19:52:38', '', '');
INSERT INTO `blog_chatting_records` VALUES ('194', '1', '3', '196', '', '2023-10-19 19:52:45', '2023-10-19 19:52:45', '', '');
INSERT INTO `blog_chatting_records` VALUES ('195', '1', '3', '197', '', '2023-10-19 19:53:15', '2023-10-19 19:53:15', '', '');
INSERT INTO `blog_chatting_records` VALUES ('196', '1', '3', '198', '', '2023-10-19 19:53:21', '2023-10-19 19:53:21', '', '');
INSERT INTO `blog_chatting_records` VALUES ('197', '3', '1', '199', '', '2023-10-19 19:53:39', '2023-10-19 19:53:39', '', '');
INSERT INTO `blog_chatting_records` VALUES ('198', '1', '3', '200', '', '2023-10-19 19:53:56', '2023-10-19 19:53:56', '', '');

-- ----------------------------
-- Table structure for `blog_chatting_records_content_mapping`
-- ----------------------------
DROP TABLE IF EXISTS `blog_chatting_records_content_mapping`;
CREATE TABLE `blog_chatting_records_content_mapping` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `chatting_records_content` text COMMENT '聊天内容',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='聊天记录关系映射';

-- ----------------------------
-- Records of blog_chatting_records_content_mapping
-- ----------------------------
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('104', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('105', '121');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('106', '213231');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('107', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('108', '11');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('109', '11');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('110', '你好');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('111', '怎么');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('112', 'hello');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('113', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('114', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('115', 'sdadsa');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('116', '21');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('117', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('118', 'he');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('119', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('120', '22');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('121', '11');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('122', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('123', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('124', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('125', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('126', '132');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('127', '212');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('128', '121');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('129', '121');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('130', '21');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('131', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('132', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('133', '124');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('134', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('135', '222');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('136', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('137', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('138', '13');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('139', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('140', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('141', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('142', '211');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('143', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('144', '212');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('145', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('146', '21');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('147', '34');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('148', '21');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('149', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('150', '34');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('151', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('152', '212');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('153', '21');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('154', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('155', '22');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('156', '你好');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('157', '你好');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('158', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('159', '你怎么了');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('160', '你还好吗');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('161', '还好');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('162', '你怎么了嘛\n');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('163', '没怎么');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('164', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('165', 'hi');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('166', 'hello');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('167', '11');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('168', '你好');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('169', '121');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('170', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('171', 'helllo');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('172', 'yes');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('173', 'nono');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('174', 'yes');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('175', 'nono\n');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('176', 'haodewa');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('177', 'yes');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('178', 'nono');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('179', 'yes');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('180', 'nihaowa');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('181', 'niao');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('182', 'nihao');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('183', 'dd');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('184', 'ds');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('185', '132');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('186', '1111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('187', '2131');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('188', '21321');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('189', 'nihoa');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('190', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('191', '11\n');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('192', '12');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('193', '111');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('194', '121');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('195', '21');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('196', '123');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('197', '33');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('198', '23');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('199', '23');
INSERT INTO `blog_chatting_records_content_mapping` VALUES ('200', '11');

-- ----------------------------
-- Table structure for `blog_comment`
-- ----------------------------
DROP TABLE IF EXISTS `blog_comment`;
CREATE TABLE `blog_comment` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '评论用户id',
  `comment_key_id` bigint NOT NULL DEFAULT '0' COMMENT '父级评论用户id',
  `article_id` bigint NOT NULL COMMENT '文章id',
  `comment_content_mapping_id` bigint NOT NULL COMMENT '评论id',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  `stated` bit(1) DEFAULT b'0',
  `active` bit(1) DEFAULT b'0' COMMENT '0:在推送列表里，1：不在',
  `person_id` bigint NOT NULL COMMENT '父级评论用户id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=109 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='评论';

-- ----------------------------
-- Records of blog_comment
-- ----------------------------
INSERT INTO `blog_comment` VALUES ('66', '1', '0', '32', '62', '2023-10-17 12:18:59', '2023-10-17 12:18:59', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('67', '3', '66', '32', '63', '2023-10-17 12:19:14', '2023-10-17 12:19:14', '', '', '', '1');
INSERT INTO `blog_comment` VALUES ('68', '1', '67', '32', '64', '2023-10-17 12:23:41', '2023-10-17 12:23:41', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('69', '3', '68', '32', '65', '2023-10-17 12:30:35', '2023-10-17 12:30:35', '', '', '', '1');
INSERT INTO `blog_comment` VALUES ('70', '1', '69', '32', '66', '2023-10-17 13:49:46', '2023-10-17 13:49:46', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('71', '3', '70', '32', '67', '2023-10-17 13:50:55', '2023-10-17 13:50:55', '', '', '', '1');
INSERT INTO `blog_comment` VALUES ('72', '1', '69', '32', '68', '2023-10-17 13:52:00', '2023-10-17 13:52:00', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('73', '1', '69', '32', '69', '2023-10-17 13:52:27', '2023-10-17 13:52:27', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('74', '1', '71', '32', '70', '2023-10-17 13:52:46', '2023-10-17 13:52:46', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('75', '1', '66', '32', '71', '2023-10-17 13:53:16', '2023-10-17 13:53:16', '', '', '', '0');
INSERT INTO `blog_comment` VALUES ('76', '1', '0', '32', '72', '2023-10-17 13:53:42', '2023-10-17 13:53:42', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('77', '1', '0', '32', '73', '2023-10-17 13:54:03', '2023-10-17 13:54:03', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('78', '1', '0', '32', '74', '2023-10-17 13:54:50', '2023-10-17 13:54:50', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('79', '1', '0', '32', '75', '2023-10-17 13:55:02', '2023-10-17 13:55:02', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('80', '1', '0', '32', '76', '2023-10-17 14:12:49', '2023-10-17 14:12:49', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('81', '1', '0', '32', '77', '2023-10-17 14:12:56', '2023-10-17 14:12:56', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('82', '1', '67', '32', '78', '2023-10-17 14:13:45', '2023-10-17 14:13:45', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('83', '1', '67', '32', '79', '2023-10-17 14:14:02', '2023-10-17 14:14:02', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('84', '1', '71', '32', '80', '2023-10-17 14:14:32', '2023-10-17 14:14:32', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('85', '1', '71', '32', '81', '2023-10-17 14:20:50', '2023-10-17 14:20:50', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('86', '1', '71', '32', '82', '2023-10-17 14:20:56', '2023-10-17 14:20:56', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('87', '3', '85', '32', '83', '2023-10-17 14:21:08', '2023-10-17 14:21:08', '', '', '', '1');
INSERT INTO `blog_comment` VALUES ('88', '1', '67', '32', '84', '2023-10-17 14:21:45', '2023-10-17 14:21:45', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('89', '1', '67', '32', '85', '2023-10-17 14:21:54', '2023-10-17 14:21:54', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('90', '3', '84', '32', '86', '2023-10-17 14:22:18', '2023-10-17 14:22:18', '', '', '', '1');
INSERT INTO `blog_comment` VALUES ('91', '1', '90', '32', '87', '2023-10-17 14:22:56', '2023-10-17 14:22:56', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('92', '1', '67', '32', '88', '2023-10-17 14:23:14', '2023-10-17 14:23:14', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('93', '1', '75', '32', '89', '2023-10-17 14:23:28', '2023-10-17 14:23:28', '', '', '', '0');
INSERT INTO `blog_comment` VALUES ('94', '1', '0', '32', '90', '2023-10-17 14:23:40', '2023-10-17 14:23:40', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('95', '1', '66', '32', '91', '2023-10-17 14:24:55', '2023-10-17 14:24:55', '', '', '', '0');
INSERT INTO `blog_comment` VALUES ('96', '1', '67', '32', '92', '2023-10-17 14:25:45', '2023-10-17 14:25:45', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('97', '1', '67', '32', '93', '2023-10-17 14:25:53', '2023-10-17 14:25:53', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('98', '1', '0', '32', '94', '2023-10-19 19:54:33', '2023-10-19 19:54:33', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('99', '1', '0', '32', '95', '2023-10-19 19:55:14', '2023-10-19 19:55:14', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('100', '1', '0', '32', '96', '2023-10-19 19:55:26', '2023-10-19 19:55:26', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('101', '1', '0', '28', '97', '2023-11-08 18:42:29', '2023-11-08 18:42:29', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('102', '1', '0', '29', '98', '2023-11-08 20:14:02', '2023-11-08 20:14:02', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('103', '1', '0', '29', '99', '2023-11-08 20:17:17', '2023-11-08 20:17:17', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('104', '1', '0', '29', '100', '2023-11-08 20:18:01', '2023-11-08 20:18:01', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('105', '1', '0', '29', '101', '2023-11-08 20:52:46', '2023-11-08 20:52:46', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('106', '1', '0', '32', '102', '2023-11-14 19:42:24', '2023-11-14 19:42:24', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('107', '1', '0', '32', '103', '2023-11-14 19:42:44', '2023-11-14 19:42:44', '', '', '', '3');
INSERT INTO `blog_comment` VALUES ('108', '1', '0', '32', '104', '2023-11-14 19:43:12', '2023-11-14 19:43:12', '', '', '', '3');

-- ----------------------------
-- Table structure for `blog_comment_content_mapping`
-- ----------------------------
DROP TABLE IF EXISTS `blog_comment_content_mapping`;
CREATE TABLE `blog_comment_content_mapping` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `comment_content` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=105 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='评论内容映射';

-- ----------------------------
-- Records of blog_comment_content_mapping
-- ----------------------------
INSERT INTO `blog_comment_content_mapping` VALUES ('1', '好的');
INSERT INTO `blog_comment_content_mapping` VALUES ('2', 'yes');
INSERT INTO `blog_comment_content_mapping` VALUES ('3', 'good');
INSERT INTO `blog_comment_content_mapping` VALUES ('4', '111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('5', '1111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('6', '年后');
INSERT INTO `blog_comment_content_mapping` VALUES ('7', 'yes');
INSERT INTO `blog_comment_content_mapping` VALUES ('8', 'nono');
INSERT INTO `blog_comment_content_mapping` VALUES ('9', 'nono');
INSERT INTO `blog_comment_content_mapping` VALUES ('10', 'hi');
INSERT INTO `blog_comment_content_mapping` VALUES ('11', 'yes');
INSERT INTO `blog_comment_content_mapping` VALUES ('12', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('13', 'dda');
INSERT INTO `blog_comment_content_mapping` VALUES ('14', '23');
INSERT INTO `blog_comment_content_mapping` VALUES ('15', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('16', 'rnjia');
INSERT INTO `blog_comment_content_mapping` VALUES ('17', '11111111111111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('18', '11111111111111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('19', '1212');
INSERT INTO `blog_comment_content_mapping` VALUES ('20', '111');
INSERT INTO `blog_comment_content_mapping` VALUES ('21', 'nihao');
INSERT INTO `blog_comment_content_mapping` VALUES ('22', 'nihao');
INSERT INTO `blog_comment_content_mapping` VALUES ('23', '1212111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('24', '121');
INSERT INTO `blog_comment_content_mapping` VALUES ('25', '1111');
INSERT INTO `blog_comment_content_mapping` VALUES ('26', '1111');
INSERT INTO `blog_comment_content_mapping` VALUES ('27', '1111');
INSERT INTO `blog_comment_content_mapping` VALUES ('28', '1111');
INSERT INTO `blog_comment_content_mapping` VALUES ('29', '1111');
INSERT INTO `blog_comment_content_mapping` VALUES ('30', '111111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('31', '1231');
INSERT INTO `blog_comment_content_mapping` VALUES ('32', '1231');
INSERT INTO `blog_comment_content_mapping` VALUES ('33', '121');
INSERT INTO `blog_comment_content_mapping` VALUES ('34', '121');
INSERT INTO `blog_comment_content_mapping` VALUES ('35', '12111');
INSERT INTO `blog_comment_content_mapping` VALUES ('36', '211');
INSERT INTO `blog_comment_content_mapping` VALUES ('37', '1111111111111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('38', '121');
INSERT INTO `blog_comment_content_mapping` VALUES ('39', '2121');
INSERT INTO `blog_comment_content_mapping` VALUES ('40', '2121');
INSERT INTO `blog_comment_content_mapping` VALUES ('41', '11111111111111111111111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('42', '12121212121111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('43', '121');
INSERT INTO `blog_comment_content_mapping` VALUES ('44', '2121');
INSERT INTO `blog_comment_content_mapping` VALUES ('45', '写的不错，继续加油');
INSERT INTO `blog_comment_content_mapping` VALUES ('46', '好的');
INSERT INTO `blog_comment_content_mapping` VALUES ('47', '写的不错继续加油！！！');
INSERT INTO `blog_comment_content_mapping` VALUES ('48', '写的不错，继续加油');
INSERT INTO `blog_comment_content_mapping` VALUES ('49', '好');
INSERT INTO `blog_comment_content_mapping` VALUES ('50', '写的不错，继续加油');
INSERT INTO `blog_comment_content_mapping` VALUES ('51', '写的不错继续加油！！！');
INSERT INTO `blog_comment_content_mapping` VALUES ('52', '好的');
INSERT INTO `blog_comment_content_mapping` VALUES ('53', '你怎么你呀');
INSERT INTO `blog_comment_content_mapping` VALUES ('54', '还好');
INSERT INTO `blog_comment_content_mapping` VALUES ('55', 'yes');
INSERT INTO `blog_comment_content_mapping` VALUES ('56', 'hoade');
INSERT INTO `blog_comment_content_mapping` VALUES ('57', '111');
INSERT INTO `blog_comment_content_mapping` VALUES ('58', 'xiexie');
INSERT INTO `blog_comment_content_mapping` VALUES ('59', '你好');
INSERT INTO `blog_comment_content_mapping` VALUES ('60', 'haode1');
INSERT INTO `blog_comment_content_mapping` VALUES ('61', '真的不错');
INSERT INTO `blog_comment_content_mapping` VALUES ('62', '121');
INSERT INTO `blog_comment_content_mapping` VALUES ('63', '23');
INSERT INTO `blog_comment_content_mapping` VALUES ('64', 'yes');
INSERT INTO `blog_comment_content_mapping` VALUES ('65', '好的');
INSERT INTO `blog_comment_content_mapping` VALUES ('66', 'hello');
INSERT INTO `blog_comment_content_mapping` VALUES ('67', '111');
INSERT INTO `blog_comment_content_mapping` VALUES ('68', '211');
INSERT INTO `blog_comment_content_mapping` VALUES ('69', '212');
INSERT INTO `blog_comment_content_mapping` VALUES ('70', '212');
INSERT INTO `blog_comment_content_mapping` VALUES ('71', '1121');
INSERT INTO `blog_comment_content_mapping` VALUES ('72', '313');
INSERT INTO `blog_comment_content_mapping` VALUES ('73', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('74', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('75', '333');
INSERT INTO `blog_comment_content_mapping` VALUES ('76', '1321');
INSERT INTO `blog_comment_content_mapping` VALUES ('77', '2131');
INSERT INTO `blog_comment_content_mapping` VALUES ('78', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('79', '34');
INSERT INTO `blog_comment_content_mapping` VALUES ('80', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('81', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('82', '23');
INSERT INTO `blog_comment_content_mapping` VALUES ('83', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('84', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('85', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('86', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('87', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('88', '1222');
INSERT INTO `blog_comment_content_mapping` VALUES ('89', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('90', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('91', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('92', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('93', '212');
INSERT INTO `blog_comment_content_mapping` VALUES ('94', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('95', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('96', '111111111111111111');
INSERT INTO `blog_comment_content_mapping` VALUES ('97', 'hoade');
INSERT INTO `blog_comment_content_mapping` VALUES ('98', 'nihoa');
INSERT INTO `blog_comment_content_mapping` VALUES ('99', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('100', 'shide1');
INSERT INTO `blog_comment_content_mapping` VALUES ('101', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('102', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('103', '12');
INSERT INTO `blog_comment_content_mapping` VALUES ('104', '34');

-- ----------------------------
-- Table structure for `blog_fans`
-- ----------------------------
DROP TABLE IF EXISTS `blog_fans`;
CREATE TABLE `blog_fans` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户id',
  `fans_user_id` bigint NOT NULL COMMENT '粉丝的用户id',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='粉丝';

-- ----------------------------
-- Records of blog_fans
-- ----------------------------
INSERT INTO `blog_fans` VALUES ('1', '1', '2', '2023-10-06 13:43:16', '2023-10-06 13:43:16', '');
INSERT INTO `blog_fans` VALUES ('2', '1', '3', '2023-10-06 14:26:09', '2023-10-06 14:26:09', '');
INSERT INTO `blog_fans` VALUES ('3', '2', '3', '2023-10-06 15:39:43', '2023-10-06 15:39:43', '');
INSERT INTO `blog_fans` VALUES ('4', '3', '1', '2023-10-08 19:32:32', '2023-10-08 19:32:32', '');

-- ----------------------------
-- Table structure for `blog_favorite`
-- ----------------------------
DROP TABLE IF EXISTS `blog_favorite`;
CREATE TABLE `blog_favorite` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '用户id',
  `favorite_name` tinytext NOT NULL COMMENT '收藏夹的名字',
  `article_id` bigint NOT NULL COMMENT '文章id',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='收藏夹';

-- ----------------------------
-- Records of blog_favorite
-- ----------------------------
INSERT INTO `blog_favorite` VALUES ('1', '1', '默认收藏夹', '0', '2023-10-05 01:55:19', '2023-10-05 01:55:23', '');
INSERT INTO `blog_favorite` VALUES ('4', '1', 'Python2', '0', '2023-10-05 12:31:45', '2023-10-05 12:31:45', '');
INSERT INTO `blog_favorite` VALUES ('5', '2', '默认收藏夹', '0', '2023-10-06 14:11:58', '2023-10-06 14:12:03', '');
INSERT INTO `blog_favorite` VALUES ('6', '3', '默认收藏夹', '0', '2023-10-06 14:25:23', '2023-10-06 14:25:23', '');
INSERT INTO `blog_favorite` VALUES ('8', '3', 'IT', '0', '2023-10-09 17:10:53', '2023-10-09 17:10:53', '');
INSERT INTO `blog_favorite` VALUES ('15', '1', 'JAVA', '0', '2023-10-12 17:18:11', '2023-10-12 17:18:11', '');
INSERT INTO `blog_favorite` VALUES ('18', '1', '默认收藏夹', '7', '2023-10-12 23:48:31', '2023-10-12 23:48:31', '');
INSERT INTO `blog_favorite` VALUES ('19', '1', 'JAVA', '5', '2023-10-12 23:48:48', '2023-10-12 23:48:48', '');
INSERT INTO `blog_favorite` VALUES ('20', '1', 'Python', '27', '2023-10-14 21:02:31', '2023-10-14 21:02:31', '');
INSERT INTO `blog_favorite` VALUES ('21', '1', 'JAVA', '32', '2023-11-08 19:31:21', '2023-11-08 19:31:21', '');
INSERT INTO `blog_favorite` VALUES ('22', '1', 'Python2', '32', '2023-11-13 16:27:23', '2023-11-13 16:27:23', '');
INSERT INTO `blog_favorite` VALUES ('23', '1', 'Python2', '31', '2023-11-13 17:16:42', '2023-11-13 17:16:42', '');
INSERT INTO `blog_favorite` VALUES ('24', '4', '默认收藏夹', '0', '2023-11-14 20:05:25', '2023-11-14 20:05:25', '');

-- ----------------------------
-- Table structure for `blog_like_browse`
-- ----------------------------
DROP TABLE IF EXISTS `blog_like_browse`;
CREATE TABLE `blog_like_browse` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` bigint NOT NULL COMMENT '点赞/浏览的用户id',
  `person_id` bigint NOT NULL COMMENT '被点赞/浏览的用户id',
  `article_id` bigint NOT NULL COMMENT '文章id',
  `like_browse_limiter` bit(1) DEFAULT b'0' COMMENT '0:点赞，1:浏览',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  `stated` bit(1) DEFAULT b'0',
  `active` bit(1) DEFAULT b'0' COMMENT '0:在推送列表里，1：不在',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='点赞/浏览';

-- ----------------------------
-- Records of blog_like_browse
-- ----------------------------
INSERT INTO `blog_like_browse` VALUES ('21', '1', '2', '6', '', '2023-10-13 00:22:54', '2023-10-13 00:22:54', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('22', '1', '3', '7', '', '2023-10-13 00:22:58', '2023-10-13 00:22:58', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('23', '3', '1', '5', '', '2023-10-14 18:57:26', '2023-10-14 18:57:26', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('24', '1', '3', '32', '', '2023-10-14 19:55:51', '2023-10-14 19:55:51', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('25', '1', '3', '31', '', '2023-10-14 19:56:02', '2023-10-14 19:56:02', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('26', '1', '3', '30', '', '2023-10-14 19:56:09', '2023-10-14 19:56:09', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('27', '1', '3', '29', '', '2023-10-14 19:56:13', '2023-10-14 19:56:13', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('28', '3', '2', '6', '', '2023-10-14 20:04:11', '2023-10-14 20:04:11', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('29', '1', '3', '28', '', '2023-10-14 20:44:21', '2023-10-14 20:44:21', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('30', '1', '3', '27', '', '2023-10-14 20:53:37', '2023-10-14 20:53:37', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('31', '1', '3', '27', '', '2023-10-14 21:02:27', '2023-10-14 21:02:27', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('32', '3', '3', '27', '', '2023-10-14 22:29:59', '2023-10-14 22:29:59', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('33', '1', '1', '5', '', '2023-11-08 19:32:09', '2023-11-08 19:32:09', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('34', '1', '3', '32', '', '2023-11-08 19:40:00', '2023-11-08 19:40:00', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('35', '1', '3', '27', '', '2023-11-13 16:23:51', '2023-11-13 16:23:51', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('36', '1', '3', '32', '', '2023-11-14 19:38:49', '2023-11-14 19:38:49', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('37', '1', '3', '32', '', '2023-11-14 19:38:58', '2023-11-14 19:38:58', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('38', '1', '3', '32', '', '2023-11-14 19:39:16', '2023-11-14 19:39:16', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('39', '3', '3', '32', '', '2023-11-14 19:39:52', '2023-11-14 19:39:52', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('40', '3', '3', '32', '', '2023-11-14 19:41:11', '2023-11-14 19:41:11', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('41', '1', '3', '32', '', '2023-11-14 19:41:40', '2023-11-14 19:41:40', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('42', '3', '1', '33', '', '2023-11-14 19:56:36', '2023-11-14 19:56:36', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('43', '3', '1', '33', '', '2023-11-14 19:57:26', '2023-11-14 19:57:26', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('44', '3', '1', '33', '', '2023-11-14 19:57:42', '2023-11-14 19:57:42', '', '', '');
INSERT INTO `blog_like_browse` VALUES ('45', '1', '1', '33', '', '2023-11-14 20:01:27', '2023-11-14 20:01:27', '', '', '');

-- ----------------------------
-- Table structure for `blog_user`
-- ----------------------------
DROP TABLE IF EXISTS `blog_user`;
CREATE TABLE `blog_user` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_name` varchar(12) DEFAULT NULL COMMENT '用户名',
  `user_pass` varchar(16) DEFAULT NULL COMMENT '密码',
  `user_phone` varchar(20) DEFAULT NULL COMMENT '电话号码',
  `user_sex` bit(1) DEFAULT b'0' COMMENT '0:女，1:男',
  `user_image` text COMMENT '头像地址',
  `user_art_id` bigint DEFAULT NULL COMMENT '技术领域ID',
  `user_intro` text COMMENT '个人简介',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `deleted` bit(1) DEFAULT b'0' COMMENT '0:未删除，1:已删除',
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_name` (`user_name`,`user_phone`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='用户';

-- ----------------------------
-- Records of blog_user
-- ----------------------------
INSERT INTO `blog_user` VALUES ('1', '任家', '12345', '13088196807', '', 'http://blog-renjia.oss-cn-chengdu.aliyuncs.com/d8d50d0d-bb81-4381-b390-0ea88c4d6e09.png', '1', '爱编程', '2023-10-02 16:57:34', '2023-11-14 19:24:30', '');

